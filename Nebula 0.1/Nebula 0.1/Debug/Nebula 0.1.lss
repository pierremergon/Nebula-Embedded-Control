
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000004c0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f7b  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e28  00000000  00000000  000026db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ce  00000000  00000000  00003503  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  000045d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b7  00000000  00000000  00004a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb3  00000000  00000000  00005207  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00005eba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_3>
  10:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 0f 02 	call	0x41e	; 0x41e <main>
  d4:	0c 94 24 02 	jmp	0x448	; 0x448 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <apdsTransceive>:
  dc:	cf 93       	push	r28
  de:	82 e7       	ldi	r24, 0x72	; 114
  e0:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_start>
  e4:	8c e9       	ldi	r24, 0x9C	; 156
  e6:	0e 94 4c 01 	call	0x298	; 0x298 <i2c_write>
  ea:	83 e7       	ldi	r24, 0x73	; 115
  ec:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_start>
  f0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <i2c_readNak>
  f4:	c8 2f       	mov	r28, r24
  f6:	0e 94 43 01 	call	0x286	; 0x286 <i2c_stop>
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_start>
 100:	85 ee       	ldi	r24, 0xE5	; 229
 102:	0e 94 4c 01 	call	0x298	; 0x298 <i2c_write>
 106:	0e 94 43 01 	call	0x286	; 0x286 <i2c_stop>
 10a:	cf 3f       	cpi	r28, 0xFF	; 255
 10c:	11 f4       	brne	.+4      	; 0x112 <apdsTransceive+0x36>
 10e:	0e 94 9d 00 	call	0x13a	; 0x13a <flashy>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <boostEnable>:
 118:	6a 9a       	sbi	0x0d, 2	; 13
 11a:	72 9a       	sbi	0x0e, 2	; 14
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 95       	ret

00000120 <solOn>:
 120:	73 9a       	sbi	0x0e, 3	; 14
 122:	41 9a       	sbi	0x08, 1	; 8
 124:	83 ec       	ldi	r24, 0xC3	; 195
 126:	99 e0       	ldi	r25, 0x09	; 9
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <solOn+0x8>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <solOn+0xe>
 12e:	00 00       	nop
 130:	41 98       	cbi	0x08, 1	; 8
 132:	40 98       	cbi	0x08, 0	; 8
 134:	73 98       	cbi	0x0e, 3	; 14
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	08 95       	ret

0000013a <flashy>:
 13a:	5d 98       	cbi	0x0b, 5	; 11
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	80 e7       	ldi	r24, 0x70	; 112
 140:	92 e0       	ldi	r25, 0x02	; 2
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <flashy+0x8>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <flashy+0x12>
 14c:	00 00       	nop
 14e:	5d 9a       	sbi	0x0b, 5	; 11
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	80 e7       	ldi	r24, 0x70	; 112
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <flashy+0x1c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <flashy+0x26>
 160:	00 00       	nop
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret

00000166 <batteryLow>:
 166:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	2f e5       	ldi	r18, 0x5F	; 95
 16a:	8a ee       	ldi	r24, 0xEA	; 234
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <batteryLow+0x8>
 176:	00 c0       	rjmp	.+0      	; 0x178 <batteryLow+0x12>
 178:	00 00       	nop
 17a:	5d 9a       	sbi	0x0b, 5	; 11
 17c:	5f 98       	cbi	0x0b, 7	; 11
 17e:	2f e5       	ldi	r18, 0x5F	; 95
 180:	8a ee       	ldi	r24, 0xEA	; 234
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <batteryLow+0x1e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <batteryLow+0x28>
 18e:	00 00       	nop
 190:	5f 9a       	sbi	0x0b, 7	; 11
 192:	5e 98       	cbi	0x0b, 6	; 11
 194:	2f e5       	ldi	r18, 0x5F	; 95
 196:	8a ee       	ldi	r24, 0xEA	; 234
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <batteryLow+0x34>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <batteryLow+0x3e>
 1a4:	00 00       	nop
 1a6:	5e 9a       	sbi	0x0b, 6	; 11
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8f 79       	andi	r24, 0x9F	; 159
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	2f e5       	ldi	r18, 0x5F	; 95
 1b0:	8a ee       	ldi	r24, 0xEA	; 234
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <batteryLow+0x4e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <batteryLow+0x58>
 1be:	00 00       	nop
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	80 66       	ori	r24, 0x60	; 96
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	80 72       	andi	r24, 0x20	; 32
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	2f e5       	ldi	r18, 0x5F	; 95
 1ce:	8a ee       	ldi	r24, 0xEA	; 234
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <batteryLow+0x6c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <batteryLow+0x76>
 1dc:	00 00       	nop
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	80 6a       	ori	r24, 0xA0	; 160
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	8f 73       	andi	r24, 0x3F	; 63
 1e8:	8b b9       	out	0x0b, r24	; 11
 1ea:	2f e5       	ldi	r18, 0x5F	; 95
 1ec:	8a ee       	ldi	r24, 0xEA	; 234
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <batteryLow+0x8a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <batteryLow+0x94>
 1fa:	00 00       	nop
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	80 6c       	ori	r24, 0xC0	; 192
 200:	8b b9       	out	0x0b, r24	; 11
 202:	8b b1       	in	r24, 0x0b	; 11
 204:	8f 75       	andi	r24, 0x5F	; 95
 206:	8b b9       	out	0x0b, r24	; 11
 208:	2f e5       	ldi	r18, 0x5F	; 95
 20a:	8a ee       	ldi	r24, 0xEA	; 234
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <batteryLow+0xa8>
 216:	00 c0       	rjmp	.+0      	; 0x218 <batteryLow+0xb2>
 218:	00 00       	nop
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	80 6a       	ori	r24, 0xA0	; 160
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret

00000224 <i2c_init>:
{
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR0 & (1<<TWINT)));    

    return TWDR0;
}/* i2c_readAck */
 224:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 22e:	84 ea       	ldi	r24, 0xA4	; 164
 230:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret

00000238 <i2c_start>:
 238:	94 ea       	ldi	r25, 0xA4	; 164
 23a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 23e:	ec eb       	ldi	r30, 0xBC	; 188
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	90 81       	ld	r25, Z
 244:	99 23       	and	r25, r25
 246:	ec f7       	brge	.-6      	; 0x242 <i2c_start+0xa>
 248:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 24c:	98 7f       	andi	r25, 0xF8	; 248
 24e:	98 30       	cpi	r25, 0x08	; 8
 250:	11 f0       	breq	.+4      	; 0x256 <i2c_start+0x1e>
 252:	90 31       	cpi	r25, 0x10	; 16
 254:	a1 f4       	brne	.+40     	; 0x27e <i2c_start+0x46>
 256:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 25a:	84 e8       	ldi	r24, 0x84	; 132
 25c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 260:	ec eb       	ldi	r30, 0xBC	; 188
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 23       	and	r24, r24
 268:	ec f7       	brge	.-6      	; 0x264 <i2c_start+0x2c>
 26a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 26e:	98 7f       	andi	r25, 0xF8	; 248
 270:	98 31       	cpi	r25, 0x18	; 24
 272:	39 f0       	breq	.+14     	; 0x282 <i2c_start+0x4a>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 34       	cpi	r25, 0x40	; 64
 278:	29 f4       	brne	.+10     	; 0x284 <i2c_start+0x4c>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret

00000286 <i2c_stop>:
 286:	84 e9       	ldi	r24, 0x94	; 148
 288:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 28c:	ec eb       	ldi	r30, 0xBC	; 188
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	84 fd       	sbrc	r24, 4
 294:	fd cf       	rjmp	.-6      	; 0x290 <i2c_stop+0xa>
 296:	08 95       	ret

00000298 <i2c_write>:
 298:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 29c:	84 e8       	ldi	r24, 0x84	; 132
 29e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2a2:	ec eb       	ldi	r30, 0xBC	; 188
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 23       	and	r24, r24
 2aa:	ec f7       	brge	.-6      	; 0x2a6 <i2c_write+0xe>
 2ac:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2b0:	98 7f       	andi	r25, 0xF8	; 248
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	98 32       	cpi	r25, 0x28	; 40
 2b6:	09 f4       	brne	.+2      	; 0x2ba <i2c_write+0x22>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret

000002bc <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR0 = (1<<TWINT) | (1<<TWEN);
 2bc:	84 e8       	ldi	r24, 0x84	; 132
 2be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR0 & (1<<TWINT)));
 2c2:	ec eb       	ldi	r30, 0xBC	; 188
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	88 23       	and	r24, r24
 2ca:	ec f7       	brge	.-6      	; 0x2c6 <i2c_readNak+0xa>
	
    return TWDR0;
 2cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}/* i2c_readNak */
 2d0:	08 95       	ret

000002d2 <__vector_1>:
	EIMSK |= (1<<INT0);
	return 0;
}

ISR(INT0_vect)
{
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
	//sleep_disable();
	count = 1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	solOn();
 2fa:	0e 94 90 00 	call	0x120	; 0x120 <solOn>
	//timerSetup(19530);
	apdsTransceive();
 2fe:	0e 94 6e 00 	call	0xdc	; 0xdc <apdsTransceive>
	i2c_start(nebula_write);
 302:	82 e7       	ldi	r24, 0x72	; 114
 304:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_start>
	i2c_write(0xE5);
 308:	85 ee       	ldi	r24, 0xE5	; 229
 30a:	0e 94 4c 01 	call	0x298	; 0x298 <i2c_write>
	i2c_stop();
 30e:	0e 94 43 01 	call	0x286	; 0x286 <i2c_stop>
	//sleep_mode();

}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <pcIntSetup>:

unsigned char pcIntSetup(void)

{
	PCICR |= (1<<PCIE1) | (1<<PCIE0);
 334:	e8 e6       	ldi	r30, 0x68	; 104
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	83 60       	ori	r24, 0x03	; 3
 33c:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT10) |(1<<PCINT0);
 33e:	ec e6       	ldi	r30, 0x6C	; 108
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	85 60       	ori	r24, 0x05	; 5
 346:	80 83       	st	Z, r24
	return 0;
}
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret

0000034c <__vector_4>:

ISR(PCINT1_vect)
{  // sleep_disable();
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	if ((PINC & (1<<2))==0)
 36e:	32 9b       	sbis	0x06, 2	; 6
	//solOff();
	//_delay_ms(20);
	//flashy();
	//sleep_mode();
	//_delay_ms(1000);
	batteryLow();
 370:	0e 94 b3 00 	call	0x166	; 0x166 <batteryLow>
	}
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_3>:

ISR(PCINT0_vect)
{   //sleep_disable();
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
	//charging();
	//sleep_mode();
}
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <timerSetup>:
unsigned char timerSetup(unsigned int timerValue)
{
	TCCR1A = 0x00;// normal port operation, no PWM, etc
 3aa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x05;// clock divided by 1024
 3ae:	25 e0       	ldi	r18, 0x05	; 5
 3b0:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 0x06;//TC0 Interrupt Mask Register
 3b4:	26 e0       	ldi	r18, 0x06	; 6
 3b6:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 0;// sets the default value for the timer.
 3ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = timerValue;// sets the value for the timer delay, example the 2 minutes or few seconds.
 3c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//TIMSK1 = 0x01;// interrupt mask for timer 1A compare match
	return 0;

}
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret

000003ce <__vector_11>:

ISR(TIMER1_COMPA_vect)// Interrupt service routine  for timer
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
	//solOff();
	// count = 0;
	//}
	//TCCR1B = 0x00;
	//flashy();
	batteryLow();
 3f0:	0e 94 b3 00 	call	0x166	; 0x166 <batteryLow>
	TCNT1 = 0;// sets the default value for the timer.
 3f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	//batteryLow();
	//PORTD &= ~(1<<redPort);
}
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	7f 91       	pop	r23
 40a:	6f 91       	pop	r22
 40c:	5f 91       	pop	r21
 40e:	4f 91       	pop	r20
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <main>:
		DDRC &= ~(1<<2);
		PORTC |=(1<<2);
		DDRB &= ~(1<<0);
		PORTB |= (1<<0);
		*/
		DDRD |= (1<<greenPort);
 41e:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |= (1<<bluePort);
 420:	56 9a       	sbi	0x0a, 6	; 10
		DDRD |= (1<<redPort); PORTD |= ((1<<greenPort) | (1<<bluePort) | (1<<redPort));
 422:	55 9a       	sbi	0x0a, 5	; 10
 424:	8b b1       	in	r24, 0x0b	; 11
 426:	80 6e       	ori	r24, 0xE0	; 224
 428:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<drvIn1);
		PORTC &= ~(1<<drvIn2);
		//PORTE |= (1<<drvSleep);

		*/
		boostEnable();
 42a:	0e 94 8c 00 	call	0x118	; 0x118 <boostEnable>
		//boostDisable();

		pcIntSetup();
 42e:	0e 94 9a 01 	call	0x334	; 0x334 <pcIntSetup>
		//solOn();
		//_delay_ms(5000);
		//solOff();
		//_delay_ms(5000);
		//proximity();
		timerSetup(2000);
 432:	80 ed       	ldi	r24, 0xD0	; 208
 434:	97 e0       	ldi	r25, 0x07	; 7
 436:	0e 94 d5 01 	call	0x3aa	; 0x3aa <timerSetup>
		sei();
 43a:	78 94       	sei
		//PORTE &= ~(1<<3);
		///SMCR |=(1<<0x07);//07 powersave
		//sleep_mode();
        //sei();

		i2c_init();
 43c:	0e 94 12 01 	call	0x224	; 0x224 <i2c_init>
		i2c_start(0x60);
 440:	80 e6       	ldi	r24, 0x60	; 96
 442:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_start>
 446:	ff cf       	rjmp	.-2      	; 0x446 <main+0x28>

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
