
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001733  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da6  00000000  00000000  00001cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4f  00000000  00000000  00002a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  000037ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070b  00000000  00000000  00003b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005cc  00000000  00000000  00004223  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000047ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 48 01 	call	0x290	; 0x290 <main>
  d4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <unUsed>:
unsigned char systemNoGo(void)
{
	batteryLow();
	return 0;

}
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	8c 7f       	andi	r24, 0xFC	; 252
  e0:	8a b9       	out	0x0a, r24	; 10
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret

000000e6 <comparator>:
  e6:	29 9a       	sbi	0x05, 1	; 5
  e8:	83 b1       	in	r24, 0x03	; 3
  ea:	82 fb       	bst	r24, 2
  ec:	88 27       	eor	r24, r24
  ee:	80 f9       	bld	r24, 0
  f0:	08 95       	ret

000000f2 <flashy>:
  f2:	5e 98       	cbi	0x0b, 6	; 11
  f4:	2f e6       	ldi	r18, 0x6F	; 111
  f6:	81 e1       	ldi	r24, 0x11	; 17
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <flashy+0x8>
 102:	00 c0       	rjmp	.+0      	; 0x104 <flashy+0x12>
 104:	00 00       	nop
 106:	5e 9a       	sbi	0x0b, 6	; 11
 108:	5e 98       	cbi	0x0b, 6	; 11
 10a:	2f e6       	ldi	r18, 0x6F	; 111
 10c:	81 e1       	ldi	r24, 0x11	; 17
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <flashy+0x1e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <flashy+0x28>
 11a:	00 00       	nop
 11c:	5e 9a       	sbi	0x0b, 6	; 11
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret

00000122 <portSetup>:
 122:	0e 94 6e 00 	call	0xdc	; 0xdc <unUsed>
 126:	55 98       	cbi	0x0a, 5	; 10
 128:	57 98       	cbi	0x0a, 7	; 10
 12a:	56 98       	cbi	0x0a, 6	; 10
 12c:	5d 9a       	sbi	0x0b, 5	; 11
 12e:	5f 9a       	sbi	0x0b, 7	; 11
 130:	5e 9a       	sbi	0x0b, 6	; 11
 132:	20 98       	cbi	0x04, 0	; 4
 134:	3a 98       	cbi	0x07, 2	; 7
 136:	42 9a       	sbi	0x08, 2	; 8
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret

0000013c <charging>:
	idle();
	return 0;
}

unsigned char charging(void)//charge indictor
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
	//pin change int
	comp = comparator();
 140:	0e 94 73 00 	call	0xe6	; 0xe6 <comparator>
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if ((PINB & (1<<batteryPort)) == 0)
 148:	18 99       	sbic	0x03, 0	; 3
 14a:	02 c0       	rjmp	.+4      	; 0x150 <charging+0x14>
	{
		PORTD |= (1<<redPort);
 14c:	5d 9a       	sbi	0x0b, 5	; 11
 14e:	0d c0       	rjmp	.+26     	; 0x16a <charging+0x2e>
	}
	else if((((PINB & (1<<batteryPort)) != 0) & (comp)))
 150:	93 b1       	in	r25, 0x03	; 3
 152:	91 70       	andi	r25, 0x01	; 1
 154:	c9 2f       	mov	r28, r25
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	d9 2f       	mov	r29, r25
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	8c 23       	and	r24, r28
 15e:	9d 23       	and	r25, r29
 160:	89 2b       	or	r24, r25
 162:	11 f0       	breq	.+4      	; 0x168 <charging+0x2c>
	{
		PORTD |= (1<<redPort);
 164:	5d 9a       	sbi	0x0b, 5	; 11
 166:	01 c0       	rjmp	.+2      	; 0x16a <charging+0x2e>
	}
	else
	{
		PORTD &= ~(1<<redPort);
 168:	5d 98       	cbi	0x0b, 5	; 11
	}
	return 0;
}
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <i2c_init>:
{
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR0 & (1<<TWINT)));    

    return TWDR0;
}/* i2c_readAck */
 172:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 17c:	84 ea       	ldi	r24, 0xA4	; 164
 17e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret

00000186 <i2c_start>:
 186:	94 ea       	ldi	r25, 0xA4	; 164
 188:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18c:	ec eb       	ldi	r30, 0xBC	; 188
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	90 81       	ld	r25, Z
 192:	99 23       	and	r25, r25
 194:	ec f7       	brge	.-6      	; 0x190 <i2c_start+0xa>
 196:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 19a:	98 7f       	andi	r25, 0xF8	; 248
 19c:	98 30       	cpi	r25, 0x08	; 8
 19e:	11 f0       	breq	.+4      	; 0x1a4 <i2c_start+0x1e>
 1a0:	90 31       	cpi	r25, 0x10	; 16
 1a2:	a1 f4       	brne	.+40     	; 0x1cc <i2c_start+0x46>
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	ec f7       	brge	.-6      	; 0x1b2 <i2c_start+0x2c>
 1b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1bc:	98 7f       	andi	r25, 0xF8	; 248
 1be:	98 31       	cpi	r25, 0x18	; 24
 1c0:	39 f0       	breq	.+14     	; 0x1d0 <i2c_start+0x4a>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 34       	cpi	r25, 0x40	; 64
 1c6:	29 f4       	brne	.+10     	; 0x1d2 <i2c_start+0x4c>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	08 95       	ret
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret

000001d4 <i2c_stop>:
 1d4:	84 e9       	ldi	r24, 0x94	; 148
 1d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1da:	ec eb       	ldi	r30, 0xBC	; 188
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	84 fd       	sbrc	r24, 4
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <i2c_stop+0xa>
 1e4:	08 95       	ret

000001e6 <i2c_write>:
 1e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1ea:	84 e8       	ldi	r24, 0x84	; 132
 1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1f0:	ec eb       	ldi	r30, 0xBC	; 188
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	88 23       	and	r24, r24
 1f8:	ec f7       	brge	.-6      	; 0x1f4 <i2c_write+0xe>
 1fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1fe:	98 7f       	andi	r25, 0xF8	; 248
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	98 32       	cpi	r25, 0x28	; 40
 204:	09 f4       	brne	.+2      	; 0x208 <i2c_write+0x22>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret

0000020a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR0 = (1<<TWINT) | (1<<TWEN);
 20a:	84 e8       	ldi	r24, 0x84	; 132
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR0 & (1<<TWINT)));
 210:	ec eb       	ldi	r30, 0xBC	; 188
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	88 23       	and	r24, r24
 218:	ec f7       	brge	.-6      	; 0x214 <i2c_readNak+0xa>
	
    return TWDR0;
 21a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}/* i2c_readNak */
 21e:	08 95       	ret

00000220 <__vector_4>:
	sei();
	return 0;
}

ISR(PCINT1_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	flashy();
 242:	0e 94 79 00 	call	0xf2	; 0xf2 <flashy>
	charging();
 246:	0e 94 9e 00 	call	0x13c	; 0x13c <charging>

}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <timerSetup>:
}
*/

unsigned char timerSetup(unsigned int timerValue)
{
	TCCR1A = 0x00;// normal port operation, no PWM, etc
 26c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x05;// clock divided by 1024
 270:	25 e0       	ldi	r18, 0x05	; 5
 272:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1 = 0;// sets the default value for the timer.
 276:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 27a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = timerValue;// sets the value for the timer delay, example the 2 minutes or few seconds.
 27e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 282:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 0x01;// interrupt mask for timer 1A compare match
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	return 0;
	
}
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret

00000290 <main>:

		/*apdsBegin(nebula_write);
		apdsCalibrate(1);
		sei();
		portSetup();*/
		portSetup();
 290:	0e 94 91 00 	call	0x122	; 0x122 <portSetup>
		timerSetup(0x0000);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 36 01 	call	0x26c	; 0x26c <timerSetup>
		DDRD|= (1<<0);
 29c:	50 9a       	sbi	0x0a, 0	; 10
		PORTD = (0<<0);
 29e:	1b b8       	out	0x0b, r1	; 11
		int num;
		i2c_init();
 2a0:	0e 94 b9 00 	call	0x172	; 0x172 <i2c_init>
		vcnlBegin(vcnl_write);
 2a4:	86 e2       	ldi	r24, 0x26	; 38
 2a6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <vcnlBegin>
		num = vcnlTransceive();
 2aa:	0e 94 5d 01 	call	0x2ba	; 0x2ba <vcnlTransceive>
    while(1)
    {
if ((num = 0x21))
{
 PORTD|= (1<<0);			
 2ae:	58 9a       	sbi	0x0b, 0	; 11
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <main+0x1e>

000002b2 <vcnlBegin>:
unsigned char vcnlReceive(void)
{	unsigned char value;
	value=i2c_readNak();
	return value;

}
 2b2:	0e 94 c3 00 	call	0x186	; 0x186 <i2c_start>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret

000002ba <vcnlTransceive>:
unsigned char vcnlTransceive(void)
{ unsigned char data;

	i2c_write(id_reg);
 2ba:	82 e9       	ldi	r24, 0x92	; 146
 2bc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <i2c_write>
#include "config.h"
#include <avr/interrupt.h>

unsigned char vcnlBegin(unsigned char val)
{
	i2c_start(val);
 2c0:	87 e2       	ldi	r24, 0x27	; 39
 2c2:	0e 94 c3 00 	call	0x186	; 0x186 <i2c_start>

	i2c_write(id_reg);
	vcnlBegin(vcnl_read);
	//i2c_write(proxDataReg);
	//apdsBegin(nebula_read);
	i2c_readNak();
 2c6:	0e 94 05 01 	call	0x20a	; 0x20a <i2c_readNak>
	i2c_stop();
 2ca:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	data=TWDR0;
 2ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	return data;
}
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
