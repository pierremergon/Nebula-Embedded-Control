
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000494  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000508  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eab  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e43  00000000  00000000  0000260b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000104d  00000000  00000000  0000344e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  0000449c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000741  00000000  00000000  00004930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca8  00000000  00000000  00005071  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00005d19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_3>
  10:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 3d 02 	call	0x47a	; 0x47a <main>
  d4:	0c 94 48 02 	jmp	0x490	; 0x490 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <apdsTransceive>:
	value=i2c_readNak();
	return value;

}
unsigned char apdsTransceive(void)
{ unsigned char data;
  dc:	cf 93       	push	r28
	i2c_start(nebula_write);
  de:	82 e7       	ldi	r24, 0x72	; 114
  e0:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_start>
	i2c_write(proxDataReg);
  e4:	8c e9       	ldi	r24, 0x9C	; 156
  e6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <i2c_write>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
  ea:	83 e7       	ldi	r24, 0x73	; 115
  ec:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_start>
	//data = i2c_readAck();
	data = i2c_readNak();
  f0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <i2c_readNak>
  f4:	c8 2f       	mov	r28, r24
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
  f6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_stop>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
	//data = i2c_readAck();
	data = i2c_readNak();
	apdsStop();
	i2c_start(nebula_write);
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_start>
	i2c_write(0xE5);
 100:	85 ee       	ldi	r24, 0xE5	; 229
 102:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <i2c_write>
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
 106:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_stop>
	i2c_start(nebula_write);
	i2c_write(0xE5);
	apdsStop();

	
	if (data == 0xFF)//A0
 10a:	cf 3f       	cpi	r28, 0xFF	; 255
 10c:	11 f4       	brne	.+4      	; 0x112 <apdsTransceive+0x36>
	{
		flashy();
 10e:	0e 94 b0 00 	call	0x160	; 0x160 <flashy>
	i2c_write(0xE5);
	apdsStop();*/
	//sleep_mode();
	return 0;
	
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <boostDisable>:
unsigned char systemNoGo(void)
{
	batteryLow();
	return 0;

}
 118:	6a 9a       	sbi	0x0d, 2	; 13
 11a:	72 98       	cbi	0x0e, 2	; 14
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 95       	ret

00000120 <comparator>:
 120:	29 9a       	sbi	0x05, 1	; 5
 122:	83 b1       	in	r24, 0x03	; 3
 124:	82 fb       	bst	r24, 2
 126:	88 27       	eor	r24, r24
 128:	80 f9       	bld	r24, 0
 12a:	08 95       	ret

0000012c <solOn>:
 12c:	73 9a       	sbi	0x0e, 3	; 14
 12e:	41 9a       	sbi	0x08, 1	; 8
 130:	83 ec       	ldi	r24, 0xC3	; 195
 132:	99 e0       	ldi	r25, 0x09	; 9
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <solOn+0x8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <solOn+0xe>
 13a:	00 00       	nop
 13c:	41 98       	cbi	0x08, 1	; 8
 13e:	40 98       	cbi	0x08, 0	; 8
 140:	73 98       	cbi	0x0e, 3	; 14
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret

00000146 <solOff>:
 146:	73 9a       	sbi	0x0e, 3	; 14
 148:	40 9a       	sbi	0x08, 0	; 8
 14a:	83 ec       	ldi	r24, 0xC3	; 195
 14c:	99 e0       	ldi	r25, 0x09	; 9
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <solOff+0x8>
 152:	00 c0       	rjmp	.+0      	; 0x154 <solOff+0xe>
 154:	00 00       	nop
 156:	40 98       	cbi	0x08, 0	; 8
 158:	41 98       	cbi	0x08, 1	; 8
 15a:	73 98       	cbi	0x0e, 3	; 14
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret

00000160 <flashy>:
 160:	5d 98       	cbi	0x0b, 5	; 11
 162:	87 ea       	ldi	r24, 0xA7	; 167
 164:	91 e6       	ldi	r25, 0x61	; 97
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <flashy+0x6>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <flashy+0xc>
 16c:	00 00       	nop
 16e:	5d 9a       	sbi	0x0b, 5	; 11
 170:	87 ea       	ldi	r24, 0xA7	; 167
 172:	91 e6       	ldi	r25, 0x61	; 97
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <flashy+0x14>
 178:	00 c0       	rjmp	.+0      	; 0x17a <flashy+0x1a>
 17a:	00 00       	nop
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret

00000180 <batteryLow>:
 180:	5d 98       	cbi	0x0b, 5	; 11
 182:	2f e5       	ldi	r18, 0x5F	; 95
 184:	8a ee       	ldi	r24, 0xEA	; 234
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <batteryLow+0x8>
 190:	00 c0       	rjmp	.+0      	; 0x192 <batteryLow+0x12>
 192:	00 00       	nop
 194:	5d 9a       	sbi	0x0b, 5	; 11
 196:	5f 98       	cbi	0x0b, 7	; 11
 198:	2f e5       	ldi	r18, 0x5F	; 95
 19a:	8a ee       	ldi	r24, 0xEA	; 234
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <batteryLow+0x1e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <batteryLow+0x28>
 1a8:	00 00       	nop
 1aa:	5f 9a       	sbi	0x0b, 7	; 11
 1ac:	5e 98       	cbi	0x0b, 6	; 11
 1ae:	2f e5       	ldi	r18, 0x5F	; 95
 1b0:	8a ee       	ldi	r24, 0xEA	; 234
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <batteryLow+0x34>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <batteryLow+0x3e>
 1be:	00 00       	nop
 1c0:	5e 9a       	sbi	0x0b, 6	; 11
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	8f 79       	andi	r24, 0x9F	; 159
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	2f e5       	ldi	r18, 0x5F	; 95
 1ca:	8a ee       	ldi	r24, 0xEA	; 234
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <batteryLow+0x4e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <batteryLow+0x58>
 1d8:	00 00       	nop
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	80 66       	ori	r24, 0x60	; 96
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	80 72       	andi	r24, 0x20	; 32
 1e4:	8b b9       	out	0x0b, r24	; 11
 1e6:	2f e5       	ldi	r18, 0x5F	; 95
 1e8:	8a ee       	ldi	r24, 0xEA	; 234
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <batteryLow+0x6c>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <batteryLow+0x76>
 1f6:	00 00       	nop
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	80 6a       	ori	r24, 0xA0	; 160
 1fc:	8b b9       	out	0x0b, r24	; 11
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	8f 73       	andi	r24, 0x3F	; 63
 202:	8b b9       	out	0x0b, r24	; 11
 204:	2f e5       	ldi	r18, 0x5F	; 95
 206:	8a ee       	ldi	r24, 0xEA	; 234
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <batteryLow+0x8a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <batteryLow+0x94>
 214:	00 00       	nop
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	80 6c       	ori	r24, 0xC0	; 192
 21a:	8b b9       	out	0x0b, r24	; 11
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	8f 75       	andi	r24, 0x5F	; 95
 220:	8b b9       	out	0x0b, r24	; 11
 222:	2f e5       	ldi	r18, 0x5F	; 95
 224:	8a ee       	ldi	r24, 0xEA	; 234
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <batteryLow+0xa8>
 230:	00 c0       	rjmp	.+0      	; 0x232 <batteryLow+0xb2>
 232:	00 00       	nop
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	80 6a       	ori	r24, 0xA0	; 160
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	08 95       	ret

0000023e <charging>:
	//idle();
	return 0;
}

unsigned char charging(void)//charge indicator
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
	//pin change int
	comp = comparator();
 242:	0e 94 90 00 	call	0x120	; 0x120 <comparator>
 246:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if ((PINB & (1<<batteryPort)) == 0)
 24a:	18 99       	sbic	0x03, 0	; 3
 24c:	02 c0       	rjmp	.+4      	; 0x252 <charging+0x14>
	{
		PORTD &= ~(1<<redPort);
 24e:	5d 98       	cbi	0x0b, 5	; 11
 250:	0d c0       	rjmp	.+26     	; 0x26c <charging+0x2e>
	}
	else if((((PINB & (1<<batteryPort)) != 0) & (comp)))
 252:	93 b1       	in	r25, 0x03	; 3
 254:	91 70       	andi	r25, 0x01	; 1
 256:	c9 2f       	mov	r28, r25
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	d9 2f       	mov	r29, r25
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	8c 23       	and	r24, r28
 260:	9d 23       	and	r25, r29
 262:	89 2b       	or	r24, r25
 264:	11 f0       	breq	.+4      	; 0x26a <charging+0x2c>
	{
		PORTD |= (1<<redPort);
 266:	5d 9a       	sbi	0x0b, 5	; 11
 268:	01 c0       	rjmp	.+2      	; 0x26c <charging+0x2e>
	}
	else
	{
		PORTD &= ~(1<<redPort);
 26a:	5d 98       	cbi	0x0b, 5	; 11
	}

	return 0;
}
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <i2c_start>:
{
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR0 & (1<<TWINT)));    

    return TWDR0;
}/* i2c_readAck */
 274:	94 ea       	ldi	r25, 0xA4	; 164
 276:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 27a:	ec eb       	ldi	r30, 0xBC	; 188
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	90 81       	ld	r25, Z
 280:	99 23       	and	r25, r25
 282:	ec f7       	brge	.-6      	; 0x27e <i2c_start+0xa>
 284:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 288:	98 7f       	andi	r25, 0xF8	; 248
 28a:	98 30       	cpi	r25, 0x08	; 8
 28c:	11 f0       	breq	.+4      	; 0x292 <i2c_start+0x1e>
 28e:	90 31       	cpi	r25, 0x10	; 16
 290:	a1 f4       	brne	.+40     	; 0x2ba <i2c_start+0x46>
 292:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 296:	84 e8       	ldi	r24, 0x84	; 132
 298:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 29c:	ec eb       	ldi	r30, 0xBC	; 188
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 23       	and	r24, r24
 2a4:	ec f7       	brge	.-6      	; 0x2a0 <i2c_start+0x2c>
 2a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2aa:	98 7f       	andi	r25, 0xF8	; 248
 2ac:	98 31       	cpi	r25, 0x18	; 24
 2ae:	39 f0       	breq	.+14     	; 0x2be <i2c_start+0x4a>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 34       	cpi	r25, 0x40	; 64
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <i2c_start+0x4c>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	08 95       	ret
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret

000002c2 <i2c_stop>:
 2c2:	84 e9       	ldi	r24, 0x94	; 148
 2c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2c8:	ec eb       	ldi	r30, 0xBC	; 188
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	84 fd       	sbrc	r24, 4
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <i2c_stop+0xa>
 2d2:	08 95       	ret

000002d4 <i2c_write>:
 2d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2d8:	84 e8       	ldi	r24, 0x84	; 132
 2da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2de:	ec eb       	ldi	r30, 0xBC	; 188
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	88 23       	and	r24, r24
 2e6:	ec f7       	brge	.-6      	; 0x2e2 <i2c_write+0xe>
 2e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2ec:	98 7f       	andi	r25, 0xF8	; 248
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	98 32       	cpi	r25, 0x28	; 40
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <i2c_write+0x22>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	08 95       	ret

000002f8 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR0 = (1<<TWINT) | (1<<TWEN);
 2f8:	84 e8       	ldi	r24, 0x84	; 132
 2fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR0 & (1<<TWINT)));
 2fe:	ec eb       	ldi	r30, 0xBC	; 188
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	88 23       	and	r24, r24
 306:	ec f7       	brge	.-6      	; 0x302 <i2c_readNak+0xa>
	
    return TWDR0;
 308:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}/* i2c_readNak */
 30c:	08 95       	ret

0000030e <__vector_1>:
	TCNT1 = 0;// sets the default value for the timer.
	OCR1A = timerValue;// sets the value for the timer delay, example the 2 minutes or few seconds.
	TIMSK1 = 0x01;// interrupt mask for timer 1A compare match
	return 0;
	
}
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
 336:	0e 94 96 00 	call	0x12c	; 0x12c <solOn>
 33a:	0e 94 6e 00 	call	0xdc	; 0xdc <apdsTransceive>
 33e:	82 e7       	ldi	r24, 0x72	; 114
 340:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_start>
 344:	85 ee       	ldi	r24, 0xE5	; 229
 346:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <i2c_write>
 34a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_stop>
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_4>:
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
 392:	32 99       	sbic	0x06, 2	; 6
 394:	15 c0       	rjmp	.+42     	; 0x3c0 <__vector_4+0x50>
 396:	0e 94 96 00 	call	0x12c	; 0x12c <solOn>
 39a:	2f e9       	ldi	r18, 0x9F	; 159
 39c:	86 e8       	ldi	r24, 0x86	; 134
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <__vector_4+0x30>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <__vector_4+0x3a>
 3aa:	00 00       	nop
 3ac:	0e 94 a3 00 	call	0x146	; 0x146 <solOff>
 3b0:	87 e8       	ldi	r24, 0x87	; 135
 3b2:	93 e1       	ldi	r25, 0x13	; 19
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <__vector_4+0x44>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <__vector_4+0x4a>
 3ba:	00 00       	nop
 3bc:	0e 94 b0 00 	call	0x160	; 0x160 <flashy>
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <__vector_3>:
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
 404:	0e 94 1f 01 	call	0x23e	; 0x23e <charging>
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	7f 91       	pop	r23
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_11>:

ISR(TIMER1_COMPA_vect)// Interrupt service routine  for timer
{   
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
	//if (count == 1)
	//{
	solOff();
 44c:	0e 94 a3 00 	call	0x146	; 0x146 <solOff>
	count = 0;
 450:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count>
	//}
	//TCCR1B = 0x00;
	flashy();
 454:	0e 94 b0 00 	call	0x160	; 0x160 <flashy>
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <main>:
		DDRC &= ~(1<<2);
		PORTC |=(1<<2);
		DDRB &= ~(1<<0);
		PORTB |= (1<<0);
		*/
		DDRD |= (1<<greenPort);
 47a:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |= (1<<bluePort);
 47c:	56 9a       	sbi	0x0a, 6	; 10
		DDRD |= (1<<redPort); PORTD |= ((1<<greenPort) | (1<<bluePort) | (1<<redPort));
 47e:	55 9a       	sbi	0x0a, 5	; 10
 480:	8b b1       	in	r24, 0x0b	; 11
 482:	80 6e       	ori	r24, 0xE0	; 224
 484:	8b b9       	out	0x0b, r24	; 11
		boostDisable();
 486:	0e 94 8c 00 	call	0x118	; 0x118 <boostDisable>
       // sei();
    while(1)
    {
			//sleep_mode();
//flashy();
batteryLow();
 48a:	0e 94 c0 00 	call	0x180	; 0x180 <batteryLow>
 48e:	fd cf       	rjmp	.-6      	; 0x48a <main+0x10>

00000490 <_exit>:
 490:	f8 94       	cli

00000492 <__stop_program>:
 492:	ff cf       	rjmp	.-2      	; 0x492 <__stop_program>
