
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000004f0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000244a  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f5f  00000000  00000000  00002c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001318  00000000  00000000  00003b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00004eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082f  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e0f  00000000  00000000  00005c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00006a1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_3>
  10:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
  d4:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <apdsTransceive>:
	value=i2c_readNak();
	return value;

}
unsigned char apdsTransceive(void)
{ unsigned char data;
  dc:	cf 93       	push	r28
	i2c_start(nebula_write);
  de:	82 e7       	ldi	r24, 0x72	; 114
  e0:	0e 94 3c 01 	call	0x278	; 0x278 <i2c_start>
	i2c_write(proxDataReg);
  e4:	8c e9       	ldi	r24, 0x9C	; 156
  e6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_write>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
  ea:	83 e7       	ldi	r24, 0x73	; 115
  ec:	0e 94 3c 01 	call	0x278	; 0x278 <i2c_start>
	//data = i2c_readAck();
	data = i2c_readNak();
  f0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <i2c_readNak>
  f4:	c8 2f       	mov	r28, r24
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
  f6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <i2c_stop>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
	//data = i2c_readAck();
	data = i2c_readNak();
	apdsStop();
	i2c_start(nebula_write);
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	0e 94 3c 01 	call	0x278	; 0x278 <i2c_start>
	i2c_write(0xE5);
 100:	85 ee       	ldi	r24, 0xE5	; 229
 102:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_write>
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
 106:	0e 94 63 01 	call	0x2c6	; 0x2c6 <i2c_stop>
	i2c_start(nebula_write);
	i2c_write(0xE5);
	apdsStop();

	
	if (data == 0xFF)//A0
 10a:	cf 3f       	cpi	r28, 0xFF	; 255
 10c:	11 f4       	brne	.+4      	; 0x112 <apdsTransceive+0x36>
	{
		flashy();
 10e:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
	i2c_write(0xE5);
	apdsStop();*/
	//sleep_mode();
	return 0;
	
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <unUsed>:
	else
	{
		batteryStatus=0;
	}
	return batteryStatus;
}
 118:	21 98       	cbi	0x04, 1	; 4
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8d b1       	in	r24, 0x0d	; 13
 11e:	29 9a       	sbi	0x05, 1	; 5
 120:	5c 9a       	sbi	0x0b, 4	; 11
 122:	70 9a       	sbi	0x0e, 0	; 14
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret

00000128 <portSetup>:
 128:	0e 94 8c 00 	call	0x118	; 0x118 <unUsed>
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	8a b9       	out	0x0a, r24	; 10
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	8a b9       	out	0x0a, r24	; 10
 138:	5d 9a       	sbi	0x0b, 5	; 11
 13a:	5f 9a       	sbi	0x0b, 7	; 11
 13c:	5e 9a       	sbi	0x0b, 6	; 11
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	8a 7f       	andi	r24, 0xFA	; 250
 142:	84 b9       	out	0x04, r24	; 4
 144:	85 b1       	in	r24, 0x05	; 5
 146:	85 60       	ori	r24, 0x05	; 5
 148:	85 b9       	out	0x05, r24	; 5
 14a:	3a 98       	cbi	0x07, 2	; 7
 14c:	42 9a       	sbi	0x08, 2	; 8
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret

00000152 <boostEnable>:
 152:	6a 9a       	sbi	0x0d, 2	; 13
 154:	72 9a       	sbi	0x0e, 2	; 14
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret

0000015a <solOn>:
 15a:	73 9a       	sbi	0x0e, 3	; 14
 15c:	41 9a       	sbi	0x08, 1	; 8
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <solOn+0x8>
 166:	00 c0       	rjmp	.+0      	; 0x168 <solOn+0xe>
 168:	00 00       	nop
 16a:	41 98       	cbi	0x08, 1	; 8
 16c:	40 98       	cbi	0x08, 0	; 8
 16e:	73 98       	cbi	0x0e, 3	; 14
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret

00000174 <solOff>:
 174:	73 9a       	sbi	0x0e, 3	; 14
 176:	40 9a       	sbi	0x08, 0	; 8
 178:	83 ec       	ldi	r24, 0xC3	; 195
 17a:	99 e0       	ldi	r25, 0x09	; 9
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <solOff+0x8>
 180:	00 c0       	rjmp	.+0      	; 0x182 <solOff+0xe>
 182:	00 00       	nop
 184:	40 98       	cbi	0x08, 0	; 8
 186:	41 98       	cbi	0x08, 1	; 8
 188:	73 98       	cbi	0x0e, 3	; 14
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret

0000018e <flashy>:
 18e:	5d 98       	cbi	0x0b, 5	; 11
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	80 e7       	ldi	r24, 0x70	; 112
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <flashy+0x8>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <flashy+0x12>
 1a0:	00 00       	nop
 1a2:	5d 9a       	sbi	0x0b, 5	; 11
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	80 e7       	ldi	r24, 0x70	; 112
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <flashy+0x1c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <flashy+0x26>
 1b4:	00 00       	nop
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret

000001ba <batteryLow>:

unsigned char batteryLow(void)//low battery indicator
{
	//boostDisable();

	PORTD &= ~(1<<redPort);
 1ba:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	2f e5       	ldi	r18, 0x5F	; 95
 1be:	8a ee       	ldi	r24, 0xEA	; 234
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <batteryLow+0x8>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <batteryLow+0x12>
 1cc:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<redPort);
 1ce:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~(1<<greenPort);
 1d0:	5f 98       	cbi	0x0b, 7	; 11
 1d2:	2f e5       	ldi	r18, 0x5F	; 95
 1d4:	8a ee       	ldi	r24, 0xEA	; 234
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <batteryLow+0x1e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <batteryLow+0x28>
 1e2:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<greenPort);
 1e4:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD &= ~(1<<bluePort);
 1e6:	5e 98       	cbi	0x0b, 6	; 11
 1e8:	2f e5       	ldi	r18, 0x5F	; 95
 1ea:	8a ee       	ldi	r24, 0xEA	; 234
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <batteryLow+0x34>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <batteryLow+0x3e>
 1f8:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<bluePort);
 1fa:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD &= ~(1<<redPort) & ~(1<<bluePort);
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	8f 79       	andi	r24, 0x9F	; 159
 200:	8b b9       	out	0x0b, r24	; 11
 202:	2f e5       	ldi	r18, 0x5F	; 95
 204:	8a ee       	ldi	r24, 0xEA	; 234
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <batteryLow+0x4e>
 210:	00 c0       	rjmp	.+0      	; 0x212 <batteryLow+0x58>
 212:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<redPort) | (1<<bluePort);
 214:	8b b1       	in	r24, 0x0b	; 11
 216:	80 66       	ori	r24, 0x60	; 96
 218:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<greenPort) & (1<<redPort);
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	80 72       	andi	r24, 0x20	; 32
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	2f e5       	ldi	r18, 0x5F	; 95
 222:	8a ee       	ldi	r24, 0xEA	; 234
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <batteryLow+0x6c>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <batteryLow+0x76>
 230:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<greenPort) |(1<<redPort);
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	80 6a       	ori	r24, 0xA0	; 160
 236:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<bluePort) & ~(1<<greenPort);
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	8f 73       	andi	r24, 0x3F	; 63
 23c:	8b b9       	out	0x0b, r24	; 11
 23e:	2f e5       	ldi	r18, 0x5F	; 95
 240:	8a ee       	ldi	r24, 0xEA	; 234
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <batteryLow+0x8a>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <batteryLow+0x94>
 24e:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<bluePort) | (1<<greenPort);
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	80 6c       	ori	r24, 0xC0	; 192
 254:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<redPort) & ~(1<<greenPort);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	8f 75       	andi	r24, 0x5F	; 95
 25a:	8b b9       	out	0x0b, r24	; 11
 25c:	2f e5       	ldi	r18, 0x5F	; 95
 25e:	8a ee       	ldi	r24, 0xEA	; 234
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <batteryLow+0xa8>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <batteryLow+0xb2>
 26c:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<redPort) | (1<<greenPort);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	80 6a       	ori	r24, 0xA0	; 160
 272:	8b b9       	out	0x0b, r24	; 11
	//idle();
	return 0;
}
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret

00000278 <i2c_start>:
 278:	94 ea       	ldi	r25, 0xA4	; 164
 27a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 27e:	ec eb       	ldi	r30, 0xBC	; 188
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	90 81       	ld	r25, Z
 284:	99 23       	and	r25, r25
 286:	ec f7       	brge	.-6      	; 0x282 <i2c_start+0xa>
 288:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 28c:	98 7f       	andi	r25, 0xF8	; 248
 28e:	98 30       	cpi	r25, 0x08	; 8
 290:	11 f0       	breq	.+4      	; 0x296 <i2c_start+0x1e>
 292:	90 31       	cpi	r25, 0x10	; 16
 294:	a1 f4       	brne	.+40     	; 0x2be <i2c_start+0x46>
 296:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 29a:	84 e8       	ldi	r24, 0x84	; 132
 29c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2a0:	ec eb       	ldi	r30, 0xBC	; 188
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	88 23       	and	r24, r24
 2a8:	ec f7       	brge	.-6      	; 0x2a4 <i2c_start+0x2c>
 2aa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 2ae:	98 7f       	andi	r25, 0xF8	; 248
 2b0:	98 31       	cpi	r25, 0x18	; 24
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <i2c_start+0x4a>
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 34       	cpi	r25, 0x40	; 64
 2b8:	29 f4       	brne	.+10     	; 0x2c4 <i2c_start+0x4c>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	08 95       	ret
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	08 95       	ret
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret

000002c6 <i2c_stop>:
 2c6:	84 e9       	ldi	r24, 0x94	; 148
 2c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2cc:	ec eb       	ldi	r30, 0xBC	; 188
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	84 fd       	sbrc	r24, 4
 2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <i2c_stop+0xa>
 2d6:	08 95       	ret

000002d8 <i2c_write>:
 2d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2dc:	84 e8       	ldi	r24, 0x84	; 132
 2de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2e2:	ec eb       	ldi	r30, 0xBC	; 188
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	ec f7       	brge	.-6      	; 0x2e6 <i2c_write+0xe>
 2ec:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 2f0:	98 7f       	andi	r25, 0xF8	; 248
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	98 32       	cpi	r25, 0x28	; 40
 2f6:	09 f4       	brne	.+2      	; 0x2fa <i2c_write+0x22>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret

000002fc <i2c_readNak>:
 2fc:	84 e8       	ldi	r24, 0x84	; 132
 2fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 302:	ec eb       	ldi	r30, 0xBC	; 188
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	88 23       	and	r24, r24
 30a:	ec f7       	brge	.-6      	; 0x306 <i2c_readNak+0xa>
 30c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 310:	08 95       	ret

00000312 <__vector_1>:
	TCNT1 = 0;// sets the default value for the timer.
	OCR1A = timerValue;// sets the value for the timer delay, example the 2 minutes or few seconds.
	TIMSK1 = 0x01;// interrupt mask for timer 1A compare match
	return 0;
	
}
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 33a:	0e 94 ad 00 	call	0x15a	; 0x15a <solOn>
 33e:	0e 94 6e 00 	call	0xdc	; 0xdc <apdsTransceive>
 342:	82 e7       	ldi	r24, 0x72	; 114
 344:	0e 94 3c 01 	call	0x278	; 0x278 <i2c_start>
 348:	85 ee       	ldi	r24, 0xE5	; 229
 34a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_write>
 34e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <i2c_stop>
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <pcIntSetup>:
 374:	e8 e6       	ldi	r30, 0x68	; 104
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	83 60       	ori	r24, 0x03	; 3
 37c:	80 83       	st	Z, r24
 37e:	ec e6       	ldi	r30, 0x6C	; 108
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	85 60       	ori	r24, 0x05	; 5
 386:	80 83       	st	Z, r24
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret

0000038c <__vector_4>:
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
 3ae:	32 9b       	sbis	0x06, 2	; 6
 3b0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <batteryLow>
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <__vector_3>:
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_11>:

ISR(TIMER1_COMPA_vect)// Interrupt service routine  for timer
{   
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	//if (count == 1)
	//{
	solOff();
 40c:	0e 94 ba 00 	call	0x174	; 0x174 <solOff>
	count = 0;
 410:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	//}
	//TCCR1B = 0x00;
	flashy();
 414:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
}
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <main>:
		*/

		/*apdsBegin(nebula_write);
		apdsCalibrate(1);
		sei();*/
		portSetup();
 43a:	0e 94 94 00 	call	0x128	; 0x128 <portSetup>
		DDRC &= ~(1<<2);
		PORTC |=(1<<2);
		DDRB &= ~(1<<0);
		PORTB |= (1<<0);
		*/
		DDRD |= (1<<greenPort);
 43e:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |= (1<<bluePort);
 440:	56 9a       	sbi	0x0a, 6	; 10
		DDRD |= (1<<redPort); PORTD |= ((1<<greenPort) | (1<<bluePort) | (1<<redPort));
 442:	55 9a       	sbi	0x0a, 5	; 10
 444:	8b b1       	in	r24, 0x0b	; 11
 446:	80 6e       	ori	r24, 0xE0	; 224
 448:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<drvIn1);
		PORTC &= ~(1<<drvIn2);
		//PORTE |= (1<<drvSleep);
		
		*/
		boostEnable();
 44a:	0e 94 a9 00 	call	0x152	; 0x152 <boostEnable>
		//boostDisable();
		
		pcIntSetup();
 44e:	0e 94 ba 01 	call	0x374	; 0x374 <pcIntSetup>
		//solOn();
		//_delay_ms(5000);
		//solOff();
		//_delay_ms(5000);
		//proximity();
		sei();
 452:	78 94       	sei
//systemNoGo();
//solOff();
//solOff();
//solOn();
//drvActuate(1);
flashy();
 454:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
vcnlTransceive();
 458:	0e 94 2f 02 	call	0x45e	; 0x45e <vcnlTransceive>
 45c:	fb cf       	rjmp	.-10     	; 0x454 <main+0x1a>

0000045e <vcnlTransceive>:

}
unsigned char vcnlTransceive(void)
{ unsigned char data;

	i2c_write(id_reg);
 45e:	82 e9       	ldi	r24, 0x92	; 146
 460:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_write>
#include "config.h"
#include <avr/interrupt.h>

unsigned char vcnlBegin(unsigned char val)
{
	i2c_start(val);
 464:	87 e2       	ldi	r24, 0x27	; 39
 466:	0e 94 3c 01 	call	0x278	; 0x278 <i2c_start>

	i2c_write(id_reg);
	vcnlBegin(vcnl_read);
	//i2c_write(proxDataReg);
	//apdsBegin(nebula_read);
	i2c_readNak();
 46a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <i2c_readNak>
	i2c_stop();
 46e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <i2c_stop>
	data=TWDR0;
 472:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	return data;
}
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
