
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000169e  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d6c  00000000  00000000  00001b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ce3  00000000  00000000  000028c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000304  00000000  00000000  000035a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e5  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004cf  00000000  00000000  00003f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00004460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a0 30       	cpi	r26, 0x00	; 0
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <unUsed>:
	else
	{
		batteryStatus=0;
	}
	return batteryStatus;	
}
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	8c 7f       	andi	r24, 0xFC	; 252
  e0:	8a b9       	out	0x0a, r24	; 10
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret

000000e6 <boostDisable>:
  e6:	72 98       	cbi	0x0e, 2	; 14
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret

000000ec <portSetup>:
  ec:	0e 94 6e 00 	call	0xdc	; 0xdc <unUsed>
  f0:	55 98       	cbi	0x0a, 5	; 10
  f2:	57 98       	cbi	0x0a, 7	; 10
  f4:	56 98       	cbi	0x0a, 6	; 10
  f6:	5d 9a       	sbi	0x0b, 5	; 11
  f8:	5f 9a       	sbi	0x0b, 7	; 11
  fa:	5e 9a       	sbi	0x0b, 6	; 11
  fc:	20 98       	cbi	0x04, 0	; 4
  fe:	3a 98       	cbi	0x07, 2	; 7
 100:	42 9a       	sbi	0x08, 2	; 8
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 95       	ret

00000106 <batteryLow>:

unsigned char batteryLow(void)//low battery indicator
{
	boostDisable();
 106:	0e 94 73 00 	call	0xe6	; 0xe6 <boostDisable>
	
	PORTD |= (1<<redPort);
 10a:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8b e7       	ldi	r24, 0x7B	; 123
 10e:	92 e9       	ldi	r25, 0x92	; 146
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <batteryLow+0xa>
 114:	00 c0       	rjmp	.+0      	; 0x116 <batteryLow+0x10>
 116:	00 00       	nop
	_delay_ms(150);
	PORTD &= ~(1<<redPort);
 118:	5d 98       	cbi	0x0b, 5	; 11
 11a:	8b e7       	ldi	r24, 0x7B	; 123
 11c:	92 e9       	ldi	r25, 0x92	; 146
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <batteryLow+0x18>
 122:	00 c0       	rjmp	.+0      	; 0x124 <batteryLow+0x1e>
 124:	00 00       	nop
	_delay_ms(150);
	PORTD |= (1<<redPort);
 126:	5d 9a       	sbi	0x0b, 5	; 11
 128:	8b e7       	ldi	r24, 0x7B	; 123
 12a:	92 e9       	ldi	r25, 0x92	; 146
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <batteryLow+0x26>
 130:	00 c0       	rjmp	.+0      	; 0x132 <batteryLow+0x2c>
 132:	00 00       	nop
	_delay_ms(150);
	PORTD &= ~(1<<redPort);
 134:	5d 98       	cbi	0x0b, 5	; 11
 136:	8b e7       	ldi	r24, 0x7B	; 123
 138:	92 e9       	ldi	r25, 0x92	; 146
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <batteryLow+0x34>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <batteryLow+0x3a>
 140:	00 00       	nop
	_delay_ms(150);
	idle();
	return 0;
}
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret

00000146 <i2c_init>:
{
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR0 & (1<<TWINT)));    

    return TWDR0;
}/* i2c_readAck */
 146:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 150:	84 ea       	ldi	r24, 0xA4	; 164
 152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret

0000015a <i2c_start>:
 15a:	94 ea       	ldi	r25, 0xA4	; 164
 15c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	99 23       	and	r25, r25
 168:	ec f7       	brge	.-6      	; 0x164 <i2c_start+0xa>
 16a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 16e:	98 7f       	andi	r25, 0xF8	; 248
 170:	98 30       	cpi	r25, 0x08	; 8
 172:	11 f0       	breq	.+4      	; 0x178 <i2c_start+0x1e>
 174:	90 31       	cpi	r25, 0x10	; 16
 176:	a1 f4       	brne	.+40     	; 0x1a0 <i2c_start+0x46>
 178:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 17c:	84 e8       	ldi	r24, 0x84	; 132
 17e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 182:	ec eb       	ldi	r30, 0xBC	; 188
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	88 23       	and	r24, r24
 18a:	ec f7       	brge	.-6      	; 0x186 <i2c_start+0x2c>
 18c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 190:	98 7f       	andi	r25, 0xF8	; 248
 192:	98 31       	cpi	r25, 0x18	; 24
 194:	39 f0       	breq	.+14     	; 0x1a4 <i2c_start+0x4a>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 34       	cpi	r25, 0x40	; 64
 19a:	29 f4       	brne	.+10     	; 0x1a6 <i2c_start+0x4c>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <i2c_stop>:
 1a8:	84 e9       	ldi	r24, 0x94	; 148
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	84 fd       	sbrc	r24, 4
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <i2c_stop+0xa>
 1b8:	08 95       	ret

000001ba <i2c_write>:
 1ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1be:	84 e8       	ldi	r24, 0x84	; 132
 1c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	ec f7       	brge	.-6      	; 0x1c8 <i2c_write+0xe>
 1ce:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1d2:	98 7f       	andi	r25, 0xF8	; 248
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	98 32       	cpi	r25, 0x28	; 40
 1d8:	09 f4       	brne	.+2      	; 0x1dc <i2c_write+0x22>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret

000001de <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR0 = (1<<TWINT) | (1<<TWEN);
 1de:	84 e8       	ldi	r24, 0x84	; 132
 1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR0 & (1<<TWINT)));
 1e4:	ec eb       	ldi	r30, 0xBC	; 188
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	ec f7       	brge	.-6      	; 0x1e8 <i2c_readNak+0xa>
	
    return TWDR0;
 1ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}/* i2c_readNak */
 1f2:	08 95       	ret

000001f4 <__vector_4>:
	return 0;
}

PCINT1_vect()
{
	batteryLow();
 1f4:	0e 94 83 00 	call	0x106	; 0x106 <batteryLow>
 1f8:	08 95       	ret

000001fa <main>:

		/*apdsBegin(nebula_write);
		apdsCalibrate(1);
		sei();
		portSetup();*/
		portSetup();
 1fa:	0e 94 76 00 	call	0xec	; 0xec <portSetup>
		DDRD|= (1<<0);
 1fe:	50 9a       	sbi	0x0a, 0	; 10
		PORTD = (0<<0);
 200:	1b b8       	out	0x0b, r1	; 11
		int num;
		i2c_init();
 202:	0e 94 a3 00 	call	0x146	; 0x146 <i2c_init>
		vcnlBegin(vcnl_write);
 206:	86 e2       	ldi	r24, 0x26	; 38
 208:	0e 94 0a 01 	call	0x214	; 0x214 <vcnlBegin>
		num = vcnlTransceive();
 20c:	0e 94 0e 01 	call	0x21c	; 0x21c <vcnlTransceive>
    while(1)
    {
if ((num = 0x21))
{
 PORTD|= (1<<0);			
 210:	58 9a       	sbi	0x0b, 0	; 11
 212:	fe cf       	rjmp	.-4      	; 0x210 <main+0x16>

00000214 <vcnlBegin>:
unsigned char vcnlReceive(void)
{	unsigned char value;
	value=i2c_readNak();
	return value;

}
 214:	0e 94 ad 00 	call	0x15a	; 0x15a <i2c_start>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret

0000021c <vcnlTransceive>:
unsigned char vcnlTransceive(void)
{ unsigned char data;

	i2c_write(id_reg);
 21c:	82 e9       	ldi	r24, 0x92	; 146
 21e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <i2c_write>
#include "config.h"
#include <avr/interrupt.h>

unsigned char vcnlBegin(unsigned char val)
{
	i2c_start(val);
 222:	87 e2       	ldi	r24, 0x27	; 39
 224:	0e 94 ad 00 	call	0x15a	; 0x15a <i2c_start>

	i2c_write(id_reg);
	vcnlBegin(vcnl_read);
	//i2c_write(proxDataReg);
	//apdsBegin(nebula_read);
	i2c_readNak();
 228:	0e 94 ef 00 	call	0x1de	; 0x1de <i2c_readNak>
	i2c_stop();
 22c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_stop>
	data=TWDR0;
 230:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	return data;
}
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
