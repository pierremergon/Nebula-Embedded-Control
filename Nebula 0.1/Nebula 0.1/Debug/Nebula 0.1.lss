
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000005a2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022f8  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee0  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000117d  00000000  00000000  00003a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000544  00000000  00000000  00004bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084d  00000000  00000000  00005120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f26  00000000  00000000  0000596d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00006893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_3>
  10:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_4>
  14:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_5>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 48 02 	call	0x490	; 0x490 <main>
  d4:	0c 94 95 02 	jmp	0x52a	; 0x52a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <apdsTransceive>:
	value=i2c_readNak();
	return value;

}
unsigned char apdsTransceive(void)
{ unsigned char data;
  dc:	cf 93       	push	r28
	i2c_start(nebula_write);
  de:	82 e7       	ldi	r24, 0x72	; 114
  e0:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_start>
	i2c_write(proxDataReg);
  e4:	8c e9       	ldi	r24, 0x9C	; 156
  e6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <i2c_write>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
  ea:	83 e7       	ldi	r24, 0x73	; 115
  ec:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_start>
	//data = i2c_readAck();
	data = i2c_readNak();
  f0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <i2c_readNak>
  f4:	c8 2f       	mov	r28, r24
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
  f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_stop>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
	//data = i2c_readAck();
	data = i2c_readNak();
	apdsStop();
	i2c_start(nebula_write);
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_start>
	i2c_write(0xE5);
 100:	85 ee       	ldi	r24, 0xE5	; 229
 102:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <i2c_write>
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
 106:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_stop>
	i2c_start(nebula_write);
	i2c_write(0xE5);
	apdsStop();

	
	if (data == 0xFF)//A0
 10a:	cf 3f       	cpi	r28, 0xFF	; 255
 10c:	11 f4       	brne	.+4      	; 0x112 <apdsTransceive+0x36>
	{
		flashy();
 10e:	0e 94 b7 00 	call	0x16e	; 0x16e <flashy>
	i2c_write(0xE5);
	apdsStop();*/
	//sleep_mode();
	return 0;
	
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <unUsed>:
	else
	{
		batteryStatus=0;
	}
	return batteryStatus;
}
 118:	21 98       	cbi	0x04, 1	; 4
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8d b1       	in	r24, 0x0d	; 13
 11e:	29 9a       	sbi	0x05, 1	; 5
 120:	5c 9a       	sbi	0x0b, 4	; 11
 122:	70 9a       	sbi	0x0e, 0	; 14
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret

00000128 <portSetup>:
 128:	0e 94 8c 00 	call	0x118	; 0x118 <unUsed>
 12c:	55 9a       	sbi	0x0a, 5	; 10
 12e:	57 9a       	sbi	0x0a, 7	; 10
 130:	56 9a       	sbi	0x0a, 6	; 10
 132:	5d 9a       	sbi	0x0b, 5	; 11
 134:	5f 9a       	sbi	0x0b, 7	; 11
 136:	5e 9a       	sbi	0x0b, 6	; 11
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	8a 7f       	andi	r24, 0xFA	; 250
 13c:	84 b9       	out	0x04, r24	; 4
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	85 60       	ori	r24, 0x05	; 5
 142:	85 b9       	out	0x05, r24	; 5
 144:	3a 98       	cbi	0x07, 2	; 7
 146:	42 9a       	sbi	0x08, 2	; 8
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret

0000014c <boostEnable>:
 14c:	6a 9a       	sbi	0x0d, 2	; 13
 14e:	72 9a       	sbi	0x0e, 2	; 14
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret

00000154 <solOn>:
 154:	73 9a       	sbi	0x0e, 3	; 14
 156:	41 9a       	sbi	0x08, 1	; 8
 158:	83 ec       	ldi	r24, 0xC3	; 195
 15a:	99 e0       	ldi	r25, 0x09	; 9
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <solOn+0x8>
 160:	00 c0       	rjmp	.+0      	; 0x162 <solOn+0xe>
 162:	00 00       	nop
 164:	41 98       	cbi	0x08, 1	; 8
 166:	40 98       	cbi	0x08, 0	; 8
 168:	73 98       	cbi	0x0e, 3	; 14
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret

0000016e <flashy>:
 16e:	5d 98       	cbi	0x0b, 5	; 11
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	80 e7       	ldi	r24, 0x70	; 112
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <flashy+0x8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <flashy+0x12>
 180:	00 00       	nop
 182:	5d 9a       	sbi	0x0b, 5	; 11
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	80 e7       	ldi	r24, 0x70	; 112
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <flashy+0x1c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <flashy+0x26>
 194:	00 00       	nop
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret

0000019a <batteryLow>:

unsigned char batteryLow(void)//low battery indicator
{
	//boostDisable();

	PORTD &= ~(1<<redPort);
 19a:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	2f e5       	ldi	r18, 0x5F	; 95
 19e:	8a ee       	ldi	r24, 0xEA	; 234
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <batteryLow+0x8>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <batteryLow+0x12>
 1ac:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<redPort);
 1ae:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~(1<<greenPort);
 1b0:	5f 98       	cbi	0x0b, 7	; 11
 1b2:	2f e5       	ldi	r18, 0x5F	; 95
 1b4:	8a ee       	ldi	r24, 0xEA	; 234
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <batteryLow+0x1e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <batteryLow+0x28>
 1c2:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<greenPort);
 1c4:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD &= ~(1<<bluePort);
 1c6:	5e 98       	cbi	0x0b, 6	; 11
 1c8:	2f e5       	ldi	r18, 0x5F	; 95
 1ca:	8a ee       	ldi	r24, 0xEA	; 234
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <batteryLow+0x34>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <batteryLow+0x3e>
 1d8:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<bluePort);
 1da:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD &= ~(1<<redPort) & ~(1<<bluePort);
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	8f 79       	andi	r24, 0x9F	; 159
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	2f e5       	ldi	r18, 0x5F	; 95
 1e4:	8a ee       	ldi	r24, 0xEA	; 234
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <batteryLow+0x4e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <batteryLow+0x58>
 1f2:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<redPort) | (1<<bluePort);
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	80 66       	ori	r24, 0x60	; 96
 1f8:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<greenPort) & (1<<redPort);
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	80 72       	andi	r24, 0x20	; 32
 1fe:	8b b9       	out	0x0b, r24	; 11
 200:	2f e5       	ldi	r18, 0x5F	; 95
 202:	8a ee       	ldi	r24, 0xEA	; 234
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <batteryLow+0x6c>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <batteryLow+0x76>
 210:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<greenPort) |(1<<redPort);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	80 6a       	ori	r24, 0xA0	; 160
 216:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<bluePort) & ~(1<<greenPort);
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	8f 73       	andi	r24, 0x3F	; 63
 21c:	8b b9       	out	0x0b, r24	; 11
 21e:	2f e5       	ldi	r18, 0x5F	; 95
 220:	8a ee       	ldi	r24, 0xEA	; 234
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <batteryLow+0x8a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <batteryLow+0x94>
 22e:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<bluePort) | (1<<greenPort);
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	80 6c       	ori	r24, 0xC0	; 192
 234:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<redPort) & ~(1<<greenPort);
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	8f 75       	andi	r24, 0x5F	; 95
 23a:	8b b9       	out	0x0b, r24	; 11
 23c:	2f e5       	ldi	r18, 0x5F	; 95
 23e:	8a ee       	ldi	r24, 0xEA	; 234
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <batteryLow+0xa8>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <batteryLow+0xb2>
 24c:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<redPort) | (1<<greenPort);
 24e:	8b b1       	in	r24, 0x0b	; 11
 250:	80 6a       	ori	r24, 0xA0	; 160
 252:	8b b9       	out	0x0b, r24	; 11
	//idle();
	return 0;
}
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret

00000258 <i2c_start>:
 258:	94 ea       	ldi	r25, 0xA4	; 164
 25a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 25e:	ec eb       	ldi	r30, 0xBC	; 188
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	90 81       	ld	r25, Z
 264:	99 23       	and	r25, r25
 266:	ec f7       	brge	.-6      	; 0x262 <i2c_start+0xa>
 268:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 26c:	98 7f       	andi	r25, 0xF8	; 248
 26e:	98 30       	cpi	r25, 0x08	; 8
 270:	11 f0       	breq	.+4      	; 0x276 <i2c_start+0x1e>
 272:	90 31       	cpi	r25, 0x10	; 16
 274:	a1 f4       	brne	.+40     	; 0x29e <i2c_start+0x46>
 276:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 27a:	84 e8       	ldi	r24, 0x84	; 132
 27c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 280:	ec eb       	ldi	r30, 0xBC	; 188
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	88 23       	and	r24, r24
 288:	ec f7       	brge	.-6      	; 0x284 <i2c_start+0x2c>
 28a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 28e:	98 7f       	andi	r25, 0xF8	; 248
 290:	98 31       	cpi	r25, 0x18	; 24
 292:	39 f0       	breq	.+14     	; 0x2a2 <i2c_start+0x4a>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 34       	cpi	r25, 0x40	; 64
 298:	29 f4       	brne	.+10     	; 0x2a4 <i2c_start+0x4c>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 95       	ret
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	08 95       	ret
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret

000002a6 <i2c_stop>:
 2a6:	84 e9       	ldi	r24, 0x94	; 148
 2a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2ac:	ec eb       	ldi	r30, 0xBC	; 188
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	84 fd       	sbrc	r24, 4
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <i2c_stop+0xa>
 2b6:	08 95       	ret

000002b8 <i2c_write>:
 2b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2bc:	84 e8       	ldi	r24, 0x84	; 132
 2be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2c2:	ec eb       	ldi	r30, 0xBC	; 188
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	88 23       	and	r24, r24
 2ca:	ec f7       	brge	.-6      	; 0x2c6 <i2c_write+0xe>
 2cc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 2d0:	98 7f       	andi	r25, 0xF8	; 248
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	98 32       	cpi	r25, 0x28	; 40
 2d6:	09 f4       	brne	.+2      	; 0x2da <i2c_write+0x22>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret

000002dc <i2c_readNak>:
 2dc:	84 e8       	ldi	r24, 0x84	; 132
 2de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2e2:	ec eb       	ldi	r30, 0xBC	; 188
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	ec f7       	brge	.-6      	; 0x2e6 <i2c_readNak+0xa>
 2ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2f0:	08 95       	ret

000002f2 <__vector_1>:
	EIMSK |= (1<<INT0);
	return 0;
}

ISR(INT0_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	//sleep_disable();
	count = 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	solOn();
 31a:	0e 94 aa 00 	call	0x154	; 0x154 <solOn>
	//timerSetup(19530);
	apdsTransceive();
 31e:	0e 94 6e 00 	call	0xdc	; 0xdc <apdsTransceive>
	i2c_start(nebula_write);
 322:	82 e7       	ldi	r24, 0x72	; 114
 324:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_start>
	i2c_write(0xE5);
 328:	85 ee       	ldi	r24, 0xE5	; 229
 32a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <i2c_write>
	i2c_stop();
 32e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_stop>
	//sleep_mode();

}
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <pcIntSetup>:

unsigned char pcIntSetup(void)

{
	PCICR |= (1<<PCIE1) | (1<<PCIE0) | (1<<PCIE0);
 354:	e8 e6       	ldi	r30, 0x68	; 104
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	83 60       	ori	r24, 0x03	; 3
 35c:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT10) |(1<<PCINT0);
 35e:	ec e6       	ldi	r30, 0x6C	; 108
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	85 60       	ori	r24, 0x05	; 5
 366:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT17);
 368:	ed e6       	ldi	r30, 0x6D	; 109
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	80 83       	st	Z, r24
	return 0;
}
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	08 95       	ret

00000376 <__vector_4>:

//button interrupt
ISR(PCINT1_vect)
{  // sleep_disable();
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
	if ((PINC & (1<<2))==0)
 398:	32 9b       	sbis	0x06, 2	; 6
	{
	batteryLow();
 39a:	0e 94 cd 00 	call	0x19a	; 0x19a <batteryLow>
	}
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__vector_3>:

ISR(PCINT0_vect)
{   //sleep_disable();
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
	//charging();
	//sleep_mode();
}
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_5>:

ISR(PCINT2_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
	flashy();
 3f6:	0e 94 b7 00 	call	0x16e	; 0x16e <flashy>

}
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	7f 91       	pop	r23
 408:	6f 91       	pop	r22
 40a:	5f 91       	pop	r21
 40c:	4f 91       	pop	r20
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <timerSetup>:
unsigned char timerSetup(unsigned int timerValue)
{
	TCCR1A = 0x00;// normal port operation, no PWM, etc
 41c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0x05;// clock divided by 1024
 420:	25 e0       	ldi	r18, 0x05	; 5
 422:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = 0x06;//TC0 Interrupt Mask Register
 426:	26 e0       	ldi	r18, 0x06	; 6
 428:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCNT1 = 0;// sets the default value for the timer.
 42c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 430:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	OCR1A = timerValue;// sets the value for the timer delay, example the 2 minutes or few seconds.
 434:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 438:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	//TIMSK1 = 0x01;// interrupt mask for timer 1A compare match
	return 0;
}
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret

00000440 <__vector_11>:

ISR(TIMER1_COMPA_vect)// Interrupt service routine  for timer
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31

	//flashy();
	batteryLow();
 462:	0e 94 cd 00 	call	0x19a	; 0x19a <batteryLow>
	TCNT1 = 0;// sets the default value for the timer.
 466:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 46a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

}
 46e:	ff 91       	pop	r31
 470:	ef 91       	pop	r30
 472:	bf 91       	pop	r27
 474:	af 91       	pop	r26
 476:	9f 91       	pop	r25
 478:	8f 91       	pop	r24
 47a:	7f 91       	pop	r23
 47c:	6f 91       	pop	r22
 47e:	5f 91       	pop	r21
 480:	4f 91       	pop	r20
 482:	3f 91       	pop	r19
 484:	2f 91       	pop	r18
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <main>:
#define F_CPU 1000000

	int num;
int main(void)
{
        portSetup();
 490:	0e 94 94 00 	call	0x128	; 0x128 <portSetup>
		//DDRD |= (1<<greenPort);
		//DDRD |= (1<<bluePort);
		//DDRD |= (1<<redPort); PORTD |= ((1<<greenPort) | (1<<bluePort) | (1<<redPort));
		//PORTE &= ~(1<<drvSleep);

		boostEnable();
 494:	0e 94 a6 00 	call	0x14c	; 0x14c <boostEnable>
		//boostDisable();

		pcIntSetup();
 498:	0e 94 aa 01 	call	0x354	; 0x354 <pcIntSetup>

		timerSetup(2000);
 49c:	80 ed       	ldi	r24, 0xD0	; 208
 49e:	97 e0       	ldi	r25, 0x07	; 7
 4a0:	0e 94 0e 02 	call	0x41c	; 0x41c <timerSetup>
		vcnlSetup(1);//prox enabled
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 6f 02 	call	0x4de	; 0x4de <vcnlSetup>
		sei();
 4aa:	78 94       	sei
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <main+0x1c>

000004ae <vcnlSend>:
	i2c_start(readAddress);//read address
	valueLow = i2c_readAck();//first byte low and acknowledge
	valueHigh = i2c_readNak();//second byte high bytes, and not acknowledge
	i2c_stop();
	return 0;
}
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	16 2f       	mov	r17, r22
 4b6:	d4 2f       	mov	r29, r20
 4b8:	c2 2f       	mov	r28, r18
 4ba:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_start>
 4be:	81 2f       	mov	r24, r17
 4c0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <i2c_write>
 4c4:	8d 2f       	mov	r24, r29
 4c6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <i2c_write>
 4ca:	8c 2f       	mov	r24, r28
 4cc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <i2c_write>
 4d0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_stop>
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	08 95       	ret

000004de <vcnlSetup>:

unsigned char vcnlSetup(unsigned char type)//1 for proximity sensor, 0 for gesture
{
	if(type = 1)
	{
		vcnlSend(vcnlSendBit,ps_Config1_Low,0x83,0x02);
 4de:	22 e0       	ldi	r18, 0x02	; 2
 4e0:	43 e8       	ldi	r20, 0x83	; 131
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	80 ec       	ldi	r24, 0xC0	; 192
 4e6:	0e 94 57 02 	call	0x4ae	; 0x4ae <vcnlSend>
		vcnlSend(vcnlSendBit,ps_Config2_Low,0x2F,0x14);
 4ea:	24 e1       	ldi	r18, 0x14	; 20
 4ec:	4f e2       	ldi	r20, 0x2F	; 47
 4ee:	63 e0       	ldi	r22, 0x03	; 3
 4f0:	80 ec       	ldi	r24, 0xC0	; 192
 4f2:	0e 94 57 02 	call	0x4ae	; 0x4ae <vcnlSend>
		vcnlSend(vcnlSendBit,ps_Config3,0x1E,0xF2);
 4f6:	22 ef       	ldi	r18, 0xF2	; 242
 4f8:	4e e1       	ldi	r20, 0x1E	; 30
 4fa:	64 e0       	ldi	r22, 0x04	; 4
 4fc:	80 ec       	ldi	r24, 0xC0	; 192
 4fe:	0e 94 57 02 	call	0x4ae	; 0x4ae <vcnlSend>
		vcnlSend(vcnlSendBit,ps_THDL,0xA0,0x00);
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	40 ea       	ldi	r20, 0xA0	; 160
 506:	65 e0       	ldi	r22, 0x05	; 5
 508:	80 ec       	ldi	r24, 0xC0	; 192
 50a:	0e 94 57 02 	call	0x4ae	; 0x4ae <vcnlSend>
		vcnlSend(vcnlSendBit,ps_THDH,0xF0,0x00);
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	40 ef       	ldi	r20, 0xF0	; 240
 512:	66 e0       	ldi	r22, 0x06	; 6
 514:	80 ec       	ldi	r24, 0xC0	; 192
 516:	0e 94 57 02 	call	0x4ae	; 0x4ae <vcnlSend>
		vcnlSend(vcnlSendBit,ps_AC_L,0x5D,0x03);
 51a:	23 e0       	ldi	r18, 0x03	; 3
 51c:	4d e5       	ldi	r20, 0x5D	; 93
 51e:	68 e0       	ldi	r22, 0x08	; 8
 520:	80 ec       	ldi	r24, 0xC0	; 192
 522:	0e 94 57 02 	call	0x4ae	; 0x4ae <vcnlSend>
	{
		;

	}
		return 0;
}
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	08 95       	ret

0000052a <_exit>:
 52a:	f8 94       	cli

0000052c <__stop_program>:
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
