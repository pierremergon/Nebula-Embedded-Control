
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000048a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eab  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e43  00000000  00000000  0000258f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105a  00000000  00000000  000033d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  0000442c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000741  00000000  00000000  000048c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca8  00000000  00000000  00005001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00005ca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_3>
  10:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  d4:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <apdsTransceive>:
	value=i2c_readNak();
	return value;

}
unsigned char apdsTransceive(void)
{ unsigned char data;
  dc:	cf 93       	push	r28
	i2c_start(nebula_write);
  de:	82 e7       	ldi	r24, 0x72	; 114
  e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <i2c_start>
	i2c_write(proxDataReg);
  e4:	8c e9       	ldi	r24, 0x9C	; 156
  e6:	0e 94 20 01 	call	0x240	; 0x240 <i2c_write>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
  ea:	83 e7       	ldi	r24, 0x73	; 115
  ec:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <i2c_start>
	//data = i2c_readAck();
	data = i2c_readNak();
  f0:	0e 94 32 01 	call	0x264	; 0x264 <i2c_readNak>
  f4:	c8 2f       	mov	r28, r24
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
  f6:	0e 94 17 01 	call	0x22e	; 0x22e <i2c_stop>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
	//data = i2c_readAck();
	data = i2c_readNak();
	apdsStop();
	i2c_start(nebula_write);
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <i2c_start>
	i2c_write(0xE5);
 100:	85 ee       	ldi	r24, 0xE5	; 229
 102:	0e 94 20 01 	call	0x240	; 0x240 <i2c_write>
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
 106:	0e 94 17 01 	call	0x22e	; 0x22e <i2c_stop>
	i2c_start(nebula_write);
	i2c_write(0xE5);
	apdsStop();

	
	if (data == 0xFF)//A0
 10a:	cf 3f       	cpi	r28, 0xFF	; 255
 10c:	11 f4       	brne	.+4      	; 0x112 <apdsTransceive+0x36>
	{
		flashy();
 10e:	0e 94 b5 00 	call	0x16a	; 0x16a <flashy>
	i2c_write(0xE5);
	apdsStop();*/
	//sleep_mode();
	return 0;
	
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <unUsed>:
unsigned char systemNoGo(void)
{
	batteryLow();
	return 0;

}
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	8c 7f       	andi	r24, 0xFC	; 252
 11c:	8a b9       	out	0x0a, r24	; 10
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret

00000122 <boostDisable>:
 122:	6a 9a       	sbi	0x0d, 2	; 13
 124:	72 98       	cbi	0x0e, 2	; 14
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret

0000012a <comparator>:
 12a:	29 9a       	sbi	0x05, 1	; 5
 12c:	83 b1       	in	r24, 0x03	; 3
 12e:	82 fb       	bst	r24, 2
 130:	88 27       	eor	r24, r24
 132:	80 f9       	bld	r24, 0
 134:	08 95       	ret

00000136 <solOn>:
 136:	73 9a       	sbi	0x0e, 3	; 14
 138:	41 9a       	sbi	0x08, 1	; 8
 13a:	83 ec       	ldi	r24, 0xC3	; 195
 13c:	99 e0       	ldi	r25, 0x09	; 9
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <solOn+0x8>
 142:	00 c0       	rjmp	.+0      	; 0x144 <solOn+0xe>
 144:	00 00       	nop
 146:	41 98       	cbi	0x08, 1	; 8
 148:	40 98       	cbi	0x08, 0	; 8
 14a:	73 98       	cbi	0x0e, 3	; 14
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret

00000150 <solOff>:
 150:	73 9a       	sbi	0x0e, 3	; 14
 152:	40 9a       	sbi	0x08, 0	; 8
 154:	83 ec       	ldi	r24, 0xC3	; 195
 156:	99 e0       	ldi	r25, 0x09	; 9
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <solOff+0x8>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <solOff+0xe>
 15e:	00 00       	nop
 160:	40 98       	cbi	0x08, 0	; 8
 162:	41 98       	cbi	0x08, 1	; 8
 164:	73 98       	cbi	0x0e, 3	; 14
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret

0000016a <flashy>:
 16a:	5d 98       	cbi	0x0b, 5	; 11
 16c:	87 ea       	ldi	r24, 0xA7	; 167
 16e:	91 e6       	ldi	r25, 0x61	; 97
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <flashy+0x6>
 174:	00 c0       	rjmp	.+0      	; 0x176 <flashy+0xc>
 176:	00 00       	nop
 178:	5d 9a       	sbi	0x0b, 5	; 11
 17a:	87 ea       	ldi	r24, 0xA7	; 167
 17c:	91 e6       	ldi	r25, 0x61	; 97
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <flashy+0x14>
 182:	00 c0       	rjmp	.+0      	; 0x184 <flashy+0x1a>
 184:	00 00       	nop
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret

0000018a <portSetup>:
 18a:	0e 94 8c 00 	call	0x118	; 0x118 <unUsed>
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	8a b9       	out	0x0a, r24	; 10
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	8a b9       	out	0x0a, r24	; 10
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	8a b9       	out	0x0a, r24	; 10
 19a:	5d 9a       	sbi	0x0b, 5	; 11
 19c:	5f 9a       	sbi	0x0b, 7	; 11
 19e:	5e 9a       	sbi	0x0b, 6	; 11
 1a0:	20 98       	cbi	0x04, 0	; 4
 1a2:	3a 98       	cbi	0x07, 2	; 7
 1a4:	42 9a       	sbi	0x08, 2	; 8
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	08 95       	ret

000001aa <charging>:
	//idle();
	return 0;
}

unsigned char charging(void)//charge indicator
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
	//pin change int
	comp = comparator();
 1ae:	0e 94 95 00 	call	0x12a	; 0x12a <comparator>
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if ((PINB & (1<<batteryPort)) == 0)
 1b6:	18 99       	sbic	0x03, 0	; 3
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <charging+0x14>
	{
		PORTD &= ~(1<<redPort);
 1ba:	5d 98       	cbi	0x0b, 5	; 11
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <charging+0x2e>
	}
	else if((((PINB & (1<<batteryPort)) != 0) & (comp)))
 1be:	93 b1       	in	r25, 0x03	; 3
 1c0:	91 70       	andi	r25, 0x01	; 1
 1c2:	c9 2f       	mov	r28, r25
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	d9 2f       	mov	r29, r25
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	8c 23       	and	r24, r28
 1cc:	9d 23       	and	r25, r29
 1ce:	89 2b       	or	r24, r25
 1d0:	11 f0       	breq	.+4      	; 0x1d6 <charging+0x2c>
	{
		PORTD |= (1<<redPort);
 1d2:	5d 9a       	sbi	0x0b, 5	; 11
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <charging+0x2e>
	}
	else
	{
		PORTD &= ~(1<<redPort);
 1d6:	5d 98       	cbi	0x0b, 5	; 11
	}

	return 0;
}
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <i2c_start>:
{
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR0 & (1<<TWINT)));    

    return TWDR0;
}/* i2c_readAck */
 1e0:	94 ea       	ldi	r25, 0xA4	; 164
 1e2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1e6:	ec eb       	ldi	r30, 0xBC	; 188
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	90 81       	ld	r25, Z
 1ec:	99 23       	and	r25, r25
 1ee:	ec f7       	brge	.-6      	; 0x1ea <i2c_start+0xa>
 1f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1f4:	98 7f       	andi	r25, 0xF8	; 248
 1f6:	98 30       	cpi	r25, 0x08	; 8
 1f8:	11 f0       	breq	.+4      	; 0x1fe <i2c_start+0x1e>
 1fa:	90 31       	cpi	r25, 0x10	; 16
 1fc:	a1 f4       	brne	.+40     	; 0x226 <i2c_start+0x46>
 1fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 208:	ec eb       	ldi	r30, 0xBC	; 188
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	ec f7       	brge	.-6      	; 0x20c <i2c_start+0x2c>
 212:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 216:	98 7f       	andi	r25, 0xF8	; 248
 218:	98 31       	cpi	r25, 0x18	; 24
 21a:	39 f0       	breq	.+14     	; 0x22a <i2c_start+0x4a>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 34       	cpi	r25, 0x40	; 64
 220:	29 f4       	brne	.+10     	; 0x22c <i2c_start+0x4c>
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret

0000022e <i2c_stop>:
 22e:	84 e9       	ldi	r24, 0x94	; 148
 230:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 234:	ec eb       	ldi	r30, 0xBC	; 188
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	84 fd       	sbrc	r24, 4
 23c:	fd cf       	rjmp	.-6      	; 0x238 <i2c_stop+0xa>
 23e:	08 95       	ret

00000240 <i2c_write>:
 240:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 244:	84 e8       	ldi	r24, 0x84	; 132
 246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 24a:	ec eb       	ldi	r30, 0xBC	; 188
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 23       	and	r24, r24
 252:	ec f7       	brge	.-6      	; 0x24e <i2c_write+0xe>
 254:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 258:	98 7f       	andi	r25, 0xF8	; 248
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	98 32       	cpi	r25, 0x28	; 40
 25e:	09 f4       	brne	.+2      	; 0x262 <i2c_write+0x22>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret

00000264 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR0 = (1<<TWINT) | (1<<TWEN);
 264:	84 e8       	ldi	r24, 0x84	; 132
 266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR0 & (1<<TWINT)));
 26a:	ec eb       	ldi	r30, 0xBC	; 188
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	88 23       	and	r24, r24
 272:	ec f7       	brge	.-6      	; 0x26e <i2c_readNak+0xa>
	
    return TWDR0;
 274:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}/* i2c_readNak */
 278:	08 95       	ret

0000027a <__vector_1>:
	TCNT1 = 0;// sets the default value for the timer.
	OCR1A = timerValue;// sets the value for the timer delay, example the 2 minutes or few seconds.
	TIMSK1 = 0x01;// interrupt mask for timer 1A compare match
	return 0;
	
}
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
 2a2:	0e 94 9b 00 	call	0x136	; 0x136 <solOn>
 2a6:	0e 94 6e 00 	call	0xdc	; 0xdc <apdsTransceive>
 2aa:	82 e7       	ldi	r24, 0x72	; 114
 2ac:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <i2c_start>
 2b0:	85 ee       	ldi	r24, 0xE5	; 229
 2b2:	0e 94 20 01 	call	0x240	; 0x240 <i2c_write>
 2b6:	0e 94 17 01 	call	0x22e	; 0x22e <i2c_stop>
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_4>:
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
 2fe:	32 99       	sbic	0x06, 2	; 6
 300:	15 c0       	rjmp	.+42     	; 0x32c <__vector_4+0x50>
 302:	0e 94 9b 00 	call	0x136	; 0x136 <solOn>
 306:	2f e9       	ldi	r18, 0x9F	; 159
 308:	86 e8       	ldi	r24, 0x86	; 134
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <__vector_4+0x30>
 314:	00 c0       	rjmp	.+0      	; 0x316 <__vector_4+0x3a>
 316:	00 00       	nop
 318:	0e 94 a8 00 	call	0x150	; 0x150 <solOff>
 31c:	87 e8       	ldi	r24, 0x87	; 135
 31e:	93 e1       	ldi	r25, 0x13	; 19
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <__vector_4+0x44>
 324:	00 c0       	rjmp	.+0      	; 0x326 <__vector_4+0x4a>
 326:	00 00       	nop
 328:	0e 94 b5 00 	call	0x16a	; 0x16a <flashy>
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	bf 91       	pop	r27
 332:	af 91       	pop	r26
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	7f 91       	pop	r23
 33a:	6f 91       	pop	r22
 33c:	5f 91       	pop	r21
 33e:	4f 91       	pop	r20
 340:	3f 91       	pop	r19
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_3>:
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	ef 93       	push	r30
 36e:	ff 93       	push	r31
 370:	0e 94 d5 00 	call	0x1aa	; 0x1aa <charging>
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_11>:

ISR(TIMER1_COMPA_vect)// Interrupt service routine  for timer
{   
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
	//if (count == 1)
	//{
	solOff();
 3b8:	0e 94 a8 00 	call	0x150	; 0x150 <solOff>
	count = 0;
 3bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count>
	//}
	//TCCR1B = 0x00;
	flashy();
 3c0:	0e 94 b5 00 	call	0x16a	; 0x16a <flashy>
}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <main>:
		*/

		/*apdsBegin(nebula_write);
		apdsCalibrate(1);
		sei();*/
		portSetup();
 3e6:	0e 94 c5 00 	call	0x18a	; 0x18a <portSetup>
		DDRC &= ~(1<<2);
		PORTC |=(1<<2);
		DDRB &= ~(1<<0);
		PORTB |= (1<<0);
		*/
		DDRD |= (1<<greenPort);
 3ea:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |= (1<<bluePort);
 3ec:	56 9a       	sbi	0x0a, 6	; 10
		DDRD |= (1<<redPort); PORTD |= ((1<<greenPort) | (1<<bluePort) | (1<<redPort));
 3ee:	55 9a       	sbi	0x0a, 5	; 10
 3f0:	8b b1       	in	r24, 0x0b	; 11
 3f2:	80 6e       	ori	r24, 0xE0	; 224
 3f4:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<drvIn2);
		//PORTE |= (1<<drvSleep);
		
		*/
		//boostEnable();
		boostDisable();
 3f6:	0e 94 91 00 	call	0x122	; 0x122 <boostDisable>
		//DDRB |=(1<<1)|(1<<7);
		//DDRE |=(1<<3);
		//PORTB &= ~(1<<1);
		////PORTB &= ~(1<<7);
		//PORTE &= ~(1<<3);
		SMCR |=(1<<0x07);//07 powersave
 3fa:	83 b7       	in	r24, 0x33	; 51
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	83 bf       	out	0x33, r24	; 51
		sleep_mode();
 400:	83 b7       	in	r24, 0x33	; 51
 402:	81 60       	ori	r24, 0x01	; 1
 404:	83 bf       	out	0x33, r24	; 51
 406:	88 95       	sleep
 408:	83 b7       	in	r24, 0x33	; 51
 40a:	8e 7f       	andi	r24, 0xFE	; 254
 40c:	83 bf       	out	0x33, r24	; 51
        sei();
 40e:	78 94       	sei
 410:	ff cf       	rjmp	.-2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
