
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000047e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fe6  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e78  00000000  00000000  00002706  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000112d  00000000  00000000  0000357e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  000046ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b7  00000000  00000000  00004b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd6  00000000  00000000  000052df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00005fb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_3>
  10:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  d4:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <apdsTransceive>:
	value=i2c_readNak();
	return value;

}
unsigned char apdsTransceive(void)
{ unsigned char data;
  dc:	cf 93       	push	r28
	i2c_start(nebula_write);
  de:	82 e7       	ldi	r24, 0x72	; 114
  e0:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_start>
	i2c_write(proxDataReg);
  e4:	8c e9       	ldi	r24, 0x9C	; 156
  e6:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_write>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
  ea:	83 e7       	ldi	r24, 0x73	; 115
  ec:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_start>
	//data = i2c_readAck();
	data = i2c_readNak();
  f0:	0e 94 4c 01 	call	0x298	; 0x298 <i2c_readNak>
  f4:	c8 2f       	mov	r28, r24
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
  f6:	0e 94 31 01 	call	0x262	; 0x262 <i2c_stop>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
	//data = i2c_readAck();
	data = i2c_readNak();
	apdsStop();
	i2c_start(nebula_write);
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_start>
	i2c_write(0xE5);
 100:	85 ee       	ldi	r24, 0xE5	; 229
 102:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_write>
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
 106:	0e 94 31 01 	call	0x262	; 0x262 <i2c_stop>
	i2c_start(nebula_write);
	i2c_write(0xE5);
	apdsStop();

	
	if (data == 0xFF)//A0
 10a:	cf 3f       	cpi	r28, 0xFF	; 255
 10c:	11 f4       	brne	.+4      	; 0x112 <apdsTransceive+0x36>
	{
		flashy();
 10e:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
	i2c_write(0xE5);
	apdsStop();*/
	//sleep_mode();
	return 0;
	
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <unUsed>:
unsigned char drvPhase_En(void)
{
	PORTE |= (1<<drvSleep);
	PORTE |= (1<<drvMode);
	return 0;
}
 118:	21 98       	cbi	0x04, 1	; 4
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8d b1       	in	r24, 0x0d	; 13
 11e:	29 9a       	sbi	0x05, 1	; 5
 120:	5c 9a       	sbi	0x0b, 4	; 11
 122:	70 9a       	sbi	0x0e, 0	; 14
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret

00000128 <portSetup>:
 128:	0e 94 8c 00 	call	0x118	; 0x118 <unUsed>
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	8a b9       	out	0x0a, r24	; 10
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	8a b9       	out	0x0a, r24	; 10
 138:	5d 9a       	sbi	0x0b, 5	; 11
 13a:	5f 9a       	sbi	0x0b, 7	; 11
 13c:	5e 9a       	sbi	0x0b, 6	; 11
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	8a 7f       	andi	r24, 0xFA	; 250
 142:	84 b9       	out	0x04, r24	; 4
 144:	85 b1       	in	r24, 0x05	; 5
 146:	85 60       	ori	r24, 0x05	; 5
 148:	85 b9       	out	0x05, r24	; 5
 14a:	3a 98       	cbi	0x07, 2	; 7
 14c:	42 9a       	sbi	0x08, 2	; 8
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret

00000152 <boostEnable>:
 152:	6a 9a       	sbi	0x0d, 2	; 13
 154:	72 9a       	sbi	0x0e, 2	; 14
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret

0000015a <solOn>:
 15a:	73 9a       	sbi	0x0e, 3	; 14
 15c:	41 9a       	sbi	0x08, 1	; 8
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <solOn+0x8>
 166:	00 c0       	rjmp	.+0      	; 0x168 <solOn+0xe>
 168:	00 00       	nop
 16a:	41 98       	cbi	0x08, 1	; 8
 16c:	40 98       	cbi	0x08, 0	; 8
 16e:	73 98       	cbi	0x0e, 3	; 14
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret

00000174 <solOff>:
 174:	73 9a       	sbi	0x0e, 3	; 14
 176:	40 9a       	sbi	0x08, 0	; 8
 178:	83 ec       	ldi	r24, 0xC3	; 195
 17a:	99 e0       	ldi	r25, 0x09	; 9
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <solOff+0x8>
 180:	00 c0       	rjmp	.+0      	; 0x182 <solOff+0xe>
 182:	00 00       	nop
 184:	40 98       	cbi	0x08, 0	; 8
 186:	41 98       	cbi	0x08, 1	; 8
 188:	73 98       	cbi	0x0e, 3	; 14
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret

0000018e <flashy>:
 18e:	5d 98       	cbi	0x0b, 5	; 11
 190:	87 ea       	ldi	r24, 0xA7	; 167
 192:	91 e6       	ldi	r25, 0x61	; 97
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <flashy+0x6>
 198:	00 c0       	rjmp	.+0      	; 0x19a <flashy+0xc>
 19a:	00 00       	nop
 19c:	5d 9a       	sbi	0x0b, 5	; 11
 19e:	87 ea       	ldi	r24, 0xA7	; 167
 1a0:	91 e6       	ldi	r25, 0x61	; 97
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <flashy+0x14>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <flashy+0x1a>
 1a8:	00 00       	nop
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret

000001ae <drvIN_IN>:
 1ae:	73 9a       	sbi	0x0e, 3	; 14
 1b0:	71 98       	cbi	0x0e, 1	; 14
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <drvActuate>:

unsigned char drvActuate(unsigned char mode)
{
	if(mode == 1)
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	59 f5       	brne	.+86     	; 0x210 <drvActuate+0x5a>
	{   drvIN_IN();
 1ba:	0e 94 d7 00 	call	0x1ae	; 0x1ae <drvIN_IN>
		for(i = 0; i<20; i++)
 1be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		{
			PORTB &= ~(1<<drv1A);
 1c2:	2e 98       	cbi	0x05, 6	; 5
			//_delay_ms(5);
			PORTB |= (1<<drv1B);
 1c4:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	2f e9       	ldi	r18, 0x9F	; 159
 1c8:	86 e8       	ldi	r24, 0x86	; 134
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <drvActuate+0x16>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <drvActuate+0x20>
 1d6:	00 00       	nop
			_delay_ms(500);
			
			PORTB &= ~(1<<drv1B);
 1d8:	2f 98       	cbi	0x05, 7	; 5
			//_delay_ms(5);
			PORTB |= (1<<drv1A);
 1da:	2e 9a       	sbi	0x05, 6	; 5
 1dc:	2f e9       	ldi	r18, 0x9F	; 159
 1de:	86 e8       	ldi	r24, 0x86	; 134
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <drvActuate+0x2c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <drvActuate+0x36>
 1ec:	00 00       	nop

unsigned char drvActuate(unsigned char mode)
{
	if(mode == 1)
	{   drvIN_IN();
		for(i = 0; i<20; i++)
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1f8:	84 31       	cpi	r24, 0x14	; 20
 1fa:	18 f3       	brcs	.-58     	; 0x1c2 <drvActuate+0xc>
			PORTB &= ~(1<<drv1B);
			//_delay_ms(5);
			PORTB |= (1<<drv1A);
			_delay_ms(500);
		}
		PORTE &= ~(1<<drvSleep);// sleep mode after actuation
 1fc:	73 98       	cbi	0x0e, 3	; 14
 1fe:	2f e3       	ldi	r18, 0x3F	; 63
 200:	8d e0       	ldi	r24, 0x0D	; 13
 202:	93 e0       	ldi	r25, 0x03	; 3
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <drvActuate+0x4e>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <drvActuate+0x58>
 20e:	00 00       	nop
		_delay_ms(1000);
	}
	return 0;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret

00000214 <i2c_start>:
 214:	94 ea       	ldi	r25, 0xA4	; 164
 216:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 21a:	ec eb       	ldi	r30, 0xBC	; 188
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	90 81       	ld	r25, Z
 220:	99 23       	and	r25, r25
 222:	ec f7       	brge	.-6      	; 0x21e <i2c_start+0xa>
 224:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 228:	98 7f       	andi	r25, 0xF8	; 248
 22a:	98 30       	cpi	r25, 0x08	; 8
 22c:	11 f0       	breq	.+4      	; 0x232 <i2c_start+0x1e>
 22e:	90 31       	cpi	r25, 0x10	; 16
 230:	a1 f4       	brne	.+40     	; 0x25a <i2c_start+0x46>
 232:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 236:	84 e8       	ldi	r24, 0x84	; 132
 238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 23c:	ec eb       	ldi	r30, 0xBC	; 188
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	88 23       	and	r24, r24
 244:	ec f7       	brge	.-6      	; 0x240 <i2c_start+0x2c>
 246:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 24a:	98 7f       	andi	r25, 0xF8	; 248
 24c:	98 31       	cpi	r25, 0x18	; 24
 24e:	39 f0       	breq	.+14     	; 0x25e <i2c_start+0x4a>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 34       	cpi	r25, 0x40	; 64
 254:	29 f4       	brne	.+10     	; 0x260 <i2c_start+0x4c>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	08 95       	ret
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	08 95       	ret

00000262 <i2c_stop>:
 262:	84 e9       	ldi	r24, 0x94	; 148
 264:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 268:	ec eb       	ldi	r30, 0xBC	; 188
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	84 fd       	sbrc	r24, 4
 270:	fd cf       	rjmp	.-6      	; 0x26c <i2c_stop+0xa>
 272:	08 95       	ret

00000274 <i2c_write>:
 274:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 278:	84 e8       	ldi	r24, 0x84	; 132
 27a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 27e:	ec eb       	ldi	r30, 0xBC	; 188
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 23       	and	r24, r24
 286:	ec f7       	brge	.-6      	; 0x282 <i2c_write+0xe>
 288:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 28c:	98 7f       	andi	r25, 0xF8	; 248
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	98 32       	cpi	r25, 0x28	; 40
 292:	09 f4       	brne	.+2      	; 0x296 <i2c_write+0x22>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret

00000298 <i2c_readNak>:
 298:	84 e8       	ldi	r24, 0x84	; 132
 29a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 29e:	ec eb       	ldi	r30, 0xBC	; 188
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	88 23       	and	r24, r24
 2a6:	ec f7       	brge	.-6      	; 0x2a2 <i2c_readNak+0xa>
 2a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2ac:	08 95       	ret

000002ae <__vector_1>:
	TCNT1 = 0;// sets the default value for the timer.
	OCR1A = timerValue;// sets the value for the timer delay, example the 2 minutes or few seconds.
	TIMSK1 = 0x01;// interrupt mask for timer 1A compare match
	return 0;
	
}
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
 2d6:	0e 94 ad 00 	call	0x15a	; 0x15a <solOn>
 2da:	0e 94 6e 00 	call	0xdc	; 0xdc <apdsTransceive>
 2de:	82 e7       	ldi	r24, 0x72	; 114
 2e0:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_start>
 2e4:	85 ee       	ldi	r24, 0xE5	; 229
 2e6:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_write>
 2ea:	0e 94 31 01 	call	0x262	; 0x262 <i2c_stop>
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <__vector_4>:
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
 332:	32 99       	sbic	0x06, 2	; 6
 334:	15 c0       	rjmp	.+42     	; 0x360 <__vector_4+0x50>
 336:	0e 94 ad 00 	call	0x15a	; 0x15a <solOn>
 33a:	2f e9       	ldi	r18, 0x9F	; 159
 33c:	86 e8       	ldi	r24, 0x86	; 134
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <__vector_4+0x30>
 348:	00 c0       	rjmp	.+0      	; 0x34a <__vector_4+0x3a>
 34a:	00 00       	nop
 34c:	0e 94 ba 00 	call	0x174	; 0x174 <solOff>
 350:	87 e8       	ldi	r24, 0x87	; 135
 352:	93 e1       	ldi	r25, 0x13	; 19
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <__vector_4+0x44>
 358:	00 c0       	rjmp	.+0      	; 0x35a <__vector_4+0x4a>
 35a:	00 00       	nop
 35c:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <__vector_3>:
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_11>:

ISR(TIMER1_COMPA_vect)// Interrupt service routine  for timer
{   
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
	//if (count == 1)
	//{
	solOff();
 3b8:	0e 94 ba 00 	call	0x174	; 0x174 <solOff>
	count = 0;
 3bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count>
	//}
	//TCCR1B = 0x00;
	flashy();
 3c0:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <main>:
		*/

		/*apdsBegin(nebula_write);
		apdsCalibrate(1);
		sei();*/
		portSetup();
 3e6:	0e 94 94 00 	call	0x128	; 0x128 <portSetup>
		DDRC &= ~(1<<2);
		PORTC |=(1<<2);
		DDRB &= ~(1<<0);
		PORTB |= (1<<0);
		*/
		DDRD |= (1<<greenPort);
 3ea:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |= (1<<bluePort);
 3ec:	56 9a       	sbi	0x0a, 6	; 10
		DDRD |= (1<<redPort); PORTD |= ((1<<greenPort) | (1<<bluePort) | (1<<redPort));
 3ee:	55 9a       	sbi	0x0a, 5	; 10
 3f0:	8b b1       	in	r24, 0x0b	; 11
 3f2:	80 6e       	ori	r24, 0xE0	; 224
 3f4:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<drvIn1);
		PORTC &= ~(1<<drvIn2);
		//PORTE |= (1<<drvSleep);
		
		*/
		boostEnable();
 3f6:	0e 94 a9 00 	call	0x152	; 0x152 <boostEnable>
//PORTE |= (1<<2);
//systemNoGo();
//solOff();
//solOff();
//solOn();
drvActuate(1);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <drvActuate>
flashy();
 400:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
 404:	fa cf       	rjmp	.-12     	; 0x3fa <main+0x14>

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
