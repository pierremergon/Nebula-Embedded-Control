
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000414  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e77  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e3f  00000000  00000000  00002513  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001051  00000000  00000000  00003352  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  000043a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000792  00000000  00000000  000047f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b95  00000000  00000000  00004f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00005b17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_3>
  10:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
  d4:	0c 94 ce 01 	jmp	0x39c	; 0x39c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <apdsTransceive>:
	value=i2c_readNak();
	return value;

}
unsigned char apdsTransceive(void)
{ unsigned char data;
  dc:	cf 93       	push	r28
	i2c_start(nebula_write);
  de:	82 e7       	ldi	r24, 0x72	; 114
  e0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
	i2c_write(proxDataReg);
  e4:	8c e9       	ldi	r24, 0x9C	; 156
  e6:	0e 94 06 01 	call	0x20c	; 0x20c <i2c_write>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
  ea:	83 e7       	ldi	r24, 0x73	; 115
  ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
	//data = i2c_readAck();
	data = i2c_readNak();
  f0:	0e 94 18 01 	call	0x230	; 0x230 <i2c_readNak>
  f4:	c8 2f       	mov	r28, r24
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
  f6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <i2c_stop>
	//i2c_write(id_reg);
	i2c_start(nebula_read);
	//data = i2c_readAck();
	data = i2c_readNak();
	apdsStop();
	i2c_start(nebula_write);
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
	i2c_write(0xE5);
 100:	85 ee       	ldi	r24, 0xE5	; 229
 102:	0e 94 06 01 	call	0x20c	; 0x20c <i2c_write>
	return 0;
	
}
unsigned char apdsStop(void)
{
	i2c_stop();
 106:	0e 94 fd 00 	call	0x1fa	; 0x1fa <i2c_stop>
	i2c_start(nebula_write);
	i2c_write(0xE5);
	apdsStop();

	
	if (data == 0xFF)//A0
 10a:	cf 3f       	cpi	r28, 0xFF	; 255
 10c:	11 f4       	brne	.+4      	; 0x112 <apdsTransceive+0x36>
	{
		flashy();
 10e:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
	i2c_write(0xE5);
	apdsStop();*/
	//sleep_mode();
	return 0;
	
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <unUsed>:
	{
		//do task for single button press
		buttonCount += 1;
	}
	return 0;
}
 118:	21 98       	cbi	0x04, 1	; 4
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8d b1       	in	r24, 0x0d	; 13
 11e:	29 9a       	sbi	0x05, 1	; 5
 120:	5c 9a       	sbi	0x0b, 4	; 11
 122:	70 9a       	sbi	0x0e, 0	; 14
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret

00000128 <portSetup>:
 128:	0e 94 8c 00 	call	0x118	; 0x118 <unUsed>
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	8a b9       	out	0x0a, r24	; 10
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	8a b9       	out	0x0a, r24	; 10
 138:	5d 9a       	sbi	0x0b, 5	; 11
 13a:	5f 9a       	sbi	0x0b, 7	; 11
 13c:	5e 9a       	sbi	0x0b, 6	; 11
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	8a 7f       	andi	r24, 0xFA	; 250
 142:	84 b9       	out	0x04, r24	; 4
 144:	85 b1       	in	r24, 0x05	; 5
 146:	85 60       	ori	r24, 0x05	; 5
 148:	85 b9       	out	0x05, r24	; 5
 14a:	3a 98       	cbi	0x07, 2	; 7
 14c:	42 9a       	sbi	0x08, 2	; 8
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret

00000152 <boostEnable>:
 152:	6a 9a       	sbi	0x0d, 2	; 13
 154:	72 9a       	sbi	0x0e, 2	; 14
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret

0000015a <solOn>:
 15a:	73 9a       	sbi	0x0e, 3	; 14
 15c:	41 9a       	sbi	0x08, 1	; 8
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <solOn+0x8>
 166:	00 c0       	rjmp	.+0      	; 0x168 <solOn+0xe>
 168:	00 00       	nop
 16a:	41 98       	cbi	0x08, 1	; 8
 16c:	40 98       	cbi	0x08, 0	; 8
 16e:	73 98       	cbi	0x0e, 3	; 14
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret

00000174 <solOff>:
 174:	73 9a       	sbi	0x0e, 3	; 14
 176:	40 9a       	sbi	0x08, 0	; 8
 178:	83 ec       	ldi	r24, 0xC3	; 195
 17a:	99 e0       	ldi	r25, 0x09	; 9
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <solOff+0x8>
 180:	00 c0       	rjmp	.+0      	; 0x182 <solOff+0xe>
 182:	00 00       	nop
 184:	40 98       	cbi	0x08, 0	; 8
 186:	41 98       	cbi	0x08, 1	; 8
 188:	73 98       	cbi	0x0e, 3	; 14
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret

0000018e <flashy>:
 18e:	5d 98       	cbi	0x0b, 5	; 11
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret

00000194 <reboot>:

unsigned char reboot(void)//reboot
{
	PORTC &= ~(1<<rebootpin);
 194:	43 98       	cbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	2f e9       	ldi	r18, 0x9F	; 159
 198:	86 e8       	ldi	r24, 0x86	; 134
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <reboot+0x8>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <reboot+0x12>
 1a6:	00 00       	nop
	_delay_ms(500);
	PORTC |= (1<<rebootpin);
 1a8:	43 9a       	sbi	0x08, 3	; 8
	
}
 1aa:	08 95       	ret

000001ac <i2c_start>:
 1ac:	94 ea       	ldi	r25, 0xA4	; 164
 1ae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1b2:	ec eb       	ldi	r30, 0xBC	; 188
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	90 81       	ld	r25, Z
 1b8:	99 23       	and	r25, r25
 1ba:	ec f7       	brge	.-6      	; 0x1b6 <i2c_start+0xa>
 1bc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1c0:	98 7f       	andi	r25, 0xF8	; 248
 1c2:	98 30       	cpi	r25, 0x08	; 8
 1c4:	11 f0       	breq	.+4      	; 0x1ca <i2c_start+0x1e>
 1c6:	90 31       	cpi	r25, 0x10	; 16
 1c8:	a1 f4       	brne	.+40     	; 0x1f2 <i2c_start+0x46>
 1ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1ce:	84 e8       	ldi	r24, 0x84	; 132
 1d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1d4:	ec eb       	ldi	r30, 0xBC	; 188
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	ec f7       	brge	.-6      	; 0x1d8 <i2c_start+0x2c>
 1de:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1e2:	98 7f       	andi	r25, 0xF8	; 248
 1e4:	98 31       	cpi	r25, 0x18	; 24
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <i2c_start+0x4a>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 34       	cpi	r25, 0x40	; 64
 1ec:	29 f4       	brne	.+10     	; 0x1f8 <i2c_start+0x4c>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	08 95       	ret
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret

000001fa <i2c_stop>:
 1fa:	84 e9       	ldi	r24, 0x94	; 148
 1fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 200:	ec eb       	ldi	r30, 0xBC	; 188
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	84 fd       	sbrc	r24, 4
 208:	fd cf       	rjmp	.-6      	; 0x204 <i2c_stop+0xa>
 20a:	08 95       	ret

0000020c <i2c_write>:
 20c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 210:	84 e8       	ldi	r24, 0x84	; 132
 212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 216:	ec eb       	ldi	r30, 0xBC	; 188
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	88 23       	and	r24, r24
 21e:	ec f7       	brge	.-6      	; 0x21a <i2c_write+0xe>
 220:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 224:	98 7f       	andi	r25, 0xF8	; 248
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	98 32       	cpi	r25, 0x28	; 40
 22a:	09 f4       	brne	.+2      	; 0x22e <i2c_write+0x22>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret

00000230 <i2c_readNak>:
 230:	84 e8       	ldi	r24, 0x84	; 132
 232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 236:	ec eb       	ldi	r30, 0xBC	; 188
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	88 23       	and	r24, r24
 23e:	ec f7       	brge	.-6      	; 0x23a <i2c_readNak+0xa>
 240:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 244:	08 95       	ret

00000246 <__vector_1>:
	TCNT1 = 0;// sets the default value for the timer.
	OCR1A = timerValue;// sets the value for the timer delay, example the 2 minutes or few seconds.
	TIMSK1 = 0x01;// interrupt mask for timer 1A compare match
	return 0;
	
}
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 26e:	0e 94 ad 00 	call	0x15a	; 0x15a <solOn>
 272:	0e 94 6e 00 	call	0xdc	; 0xdc <apdsTransceive>
 276:	82 e7       	ldi	r24, 0x72	; 114
 278:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
 27c:	85 ee       	ldi	r24, 0xE5	; 229
 27e:	0e 94 06 01 	call	0x20c	; 0x20c <i2c_write>
 282:	0e 94 fd 00 	call	0x1fa	; 0x1fa <i2c_stop>
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_4>:
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
 2ca:	32 99       	sbic	0x06, 2	; 6
 2cc:	15 c0       	rjmp	.+42     	; 0x2f8 <__vector_4+0x50>
 2ce:	0e 94 ad 00 	call	0x15a	; 0x15a <solOn>
 2d2:	2f e9       	ldi	r18, 0x9F	; 159
 2d4:	86 e8       	ldi	r24, 0x86	; 134
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <__vector_4+0x30>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <__vector_4+0x3a>
 2e2:	00 00       	nop
 2e4:	0e 94 ba 00 	call	0x174	; 0x174 <solOff>
 2e8:	87 e8       	ldi	r24, 0x87	; 135
 2ea:	93 e1       	ldi	r25, 0x13	; 19
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <__vector_4+0x44>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <__vector_4+0x4a>
 2f2:	00 00       	nop
 2f4:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_3>:
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_11>:

ISR(TIMER1_COMPA_vect)// Interrupt service routine  for timer
{   
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	2f 93       	push	r18
 33a:	3f 93       	push	r19
 33c:	4f 93       	push	r20
 33e:	5f 93       	push	r21
 340:	6f 93       	push	r22
 342:	7f 93       	push	r23
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
	//if (count == 1)
	//{
	solOff();
 350:	0e 94 ba 00 	call	0x174	; 0x174 <solOff>
	count = 0;
 354:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	//}
	//TCCR1B = 0x00;
	flashy();
 358:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <main>:
		*/

		/*apdsBegin(nebula_write);
		apdsCalibrate(1);
		sei();*/
		portSetup();
 37e:	0e 94 94 00 	call	0x128	; 0x128 <portSetup>
		DDRC &= ~(1<<2);
		PORTC |=(1<<2);
		DDRB &= ~(1<<0);
		PORTB |= (1<<0);
		*/
		DDRD |= (1<<greenPort);
 382:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |= (1<<bluePort);
 384:	56 9a       	sbi	0x0a, 6	; 10
		DDRD |= (1<<redPort); PORTD |= ((1<<greenPort) | (1<<bluePort) | (1<<redPort));
 386:	55 9a       	sbi	0x0a, 5	; 10
 388:	8b b1       	in	r24, 0x0b	; 11
 38a:	80 6e       	ori	r24, 0xE0	; 224
 38c:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<drvIn1);
		PORTC &= ~(1<<drvIn2);
		//PORTE |= (1<<drvSleep);
		
		*/
		boostEnable();
 38e:	0e 94 a9 00 	call	0x152	; 0x152 <boostEnable>
		//sleep_mode();
        //sei();
    while(1)
    {
//sleep_mode();
flashy();
 392:	0e 94 c7 00 	call	0x18e	; 0x18e <flashy>
reboot();
 396:	0e 94 ca 00 	call	0x194	; 0x194 <reboot>
 39a:	fb cf       	rjmp	.-10     	; 0x392 <main+0x14>

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
