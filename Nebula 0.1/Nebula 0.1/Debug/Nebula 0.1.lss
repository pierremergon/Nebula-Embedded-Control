
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b85  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a2  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073e  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00001e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000201  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002661  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <apdsTransceive>:

}
unsigned char apdsTransceive(void)
{ unsigned char data;

	i2c_start(nebula_write);
  90:	82 e7       	ldi	r24, 0x72	; 114
  92:	0e 94 5e 00 	call	0xbc	; 0xbc <i2c_start>
	i2c_write(id_reg);
  96:	82 e9       	ldi	r24, 0x92	; 146
  98:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_write>
#include "interrupt.h"
#include "config.h"

unsigned char apdsBegin(unsigned char apdsaddr)
{
	i2c_start(apdsaddr);
  9c:	83 e7       	ldi	r24, 0x73	; 115
  9e:	0e 94 5e 00 	call	0xbc	; 0xbc <i2c_start>
{ unsigned char data;

	i2c_start(nebula_write);
	i2c_write(id_reg);
	apdsBegin(nebula_read);
	data=TWDR;
  a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	return data;
}
  a6:	08 95       	ret

000000a8 <i2c_init>:
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
}/* i2c_stop */
  a8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret

000000bc <i2c_start>:
  bc:	94 ea       	ldi	r25, 0xA4	; 164
  be:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  c2:	ec eb       	ldi	r30, 0xBC	; 188
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	99 23       	and	r25, r25
  ca:	ec f7       	brge	.-6      	; 0xc6 <i2c_start+0xa>
  cc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  d0:	98 7f       	andi	r25, 0xF8	; 248
  d2:	98 30       	cpi	r25, 0x08	; 8
  d4:	11 f0       	breq	.+4      	; 0xda <i2c_start+0x1e>
  d6:	90 31       	cpi	r25, 0x10	; 16
  d8:	a1 f4       	brne	.+40     	; 0x102 <i2c_start+0x46>
  da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  de:	84 e8       	ldi	r24, 0x84	; 132
  e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e4:	ec eb       	ldi	r30, 0xBC	; 188
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 23       	and	r24, r24
  ec:	ec f7       	brge	.-6      	; 0xe8 <i2c_start+0x2c>
  ee:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f2:	98 7f       	andi	r25, 0xF8	; 248
  f4:	98 31       	cpi	r25, 0x18	; 24
  f6:	39 f0       	breq	.+14     	; 0x106 <i2c_start+0x4a>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 34       	cpi	r25, 0x40	; 64
  fc:	29 f4       	brne	.+10     	; 0x108 <i2c_start+0x4c>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	08 95       	ret
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	08 95       	ret
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret

0000010a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 10a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 114:	ec eb       	ldi	r30, 0xBC	; 188
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 23       	and	r24, r24
 11c:	ec f7       	brge	.-6      	; 0x118 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 11e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 122:	98 7f       	andi	r25, 0xF8	; 248
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	98 32       	cpi	r25, 0x28	; 40
 128:	09 f4       	brne	.+2      	; 0x12c <i2c_write+0x22>
 12a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
}/* i2c_write */
 12c:	08 95       	ret

0000012e <__vector_1>:
	PORTC=data;
	sei();
}
*/
ISR(INT0_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
	//what to do when water becomes hot
	//solOff();//turn solenoid off
	//systemNoGo();//flash warning led because of temp ;(
	//systemGo();
	PORTB &= ~(1<<2);
 138:	2a 98       	cbi	0x05, 2	; 5
	
	sei();
 13a:	78 94       	sei
}
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <main>:
	int num;
int main(void)
{
		//unUsed();//disable unused ports
		unsigned char test;
		DDRC |=(1<<1)|(1<<0);
 146:	87 b1       	in	r24, 0x07	; 7
 148:	83 60       	ori	r24, 0x03	; 3
 14a:	87 b9       	out	0x07, r24	; 7
		i2c_init();//initialize i2c
 14c:	0e 94 54 00 	call	0xa8	; 0xa8 <i2c_init>
		test=apdsTransceive();
 150:	0e 94 48 00 	call	0x90	; 0x90 <apdsTransceive>
		if ((test=0x92))
		{
			PORTC |=(1<<0);
 154:	40 9a       	sbi	0x08, 0	; 8
		*/
    while (1)
    {
   return(0);
	}
}
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	08 95       	ret

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
