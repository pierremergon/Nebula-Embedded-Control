
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001128  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b1b  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000868  00000000  00000000  0000200b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002874  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000605  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000480  00000000  00000000  00003089  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003509  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a0 30       	cpi	r26, 0x00	; 0
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  d4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <boostEnable>:
	else
	{
		batteryStatus=0;
	}
	return batteryStatus;	
}
  dc:	6a 9a       	sbi	0x0d, 2	; 13
  de:	72 9a       	sbi	0x0e, 2	; 14
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret

000000e4 <solOn>:
  e4:	41 9a       	sbi	0x08, 1	; 8
  e6:	87 e8       	ldi	r24, 0x87	; 135
  e8:	93 e1       	ldi	r25, 0x13	; 19
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <solOn+0x6>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <solOn+0xc>
  f0:	00 00       	nop
  f2:	41 98       	cbi	0x08, 1	; 8
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <batteryLow>:

unsigned char batteryLow(void)//low battery indicator
{
	//boostDisable();
    
	PORTD &= ~(1<<redPort);
  f8:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	87 ea       	ldi	r24, 0xA7	; 167
  fc:	91 e6       	ldi	r25, 0x61	; 97
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <batteryLow+0x6>
 102:	00 c0       	rjmp	.+0      	; 0x104 <batteryLow+0xc>
 104:	00 00       	nop
	_delay_ms(100);
	PORTD |= (1<<redPort);
 106:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~(1<<greenPort);
 108:	5f 98       	cbi	0x0b, 7	; 11
 10a:	87 ea       	ldi	r24, 0xA7	; 167
 10c:	91 e6       	ldi	r25, 0x61	; 97
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <batteryLow+0x16>
 112:	00 c0       	rjmp	.+0      	; 0x114 <batteryLow+0x1c>
 114:	00 00       	nop
	_delay_ms(100);
	PORTD |= (1<<greenPort);
 116:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD &= ~(1<<bluePort);
 118:	5e 98       	cbi	0x0b, 6	; 11
 11a:	87 ea       	ldi	r24, 0xA7	; 167
 11c:	91 e6       	ldi	r25, 0x61	; 97
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <batteryLow+0x26>
 122:	00 c0       	rjmp	.+0      	; 0x124 <batteryLow+0x2c>
 124:	00 00       	nop
	_delay_ms(100);
	PORTD |= (1<<bluePort);
 126:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD &= ~(1<<redPort) & ~(1<<bluePort);
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	8f 79       	andi	r24, 0x9F	; 159
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	87 ea       	ldi	r24, 0xA7	; 167
 130:	91 e6       	ldi	r25, 0x61	; 97
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <batteryLow+0x3a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <batteryLow+0x40>
 138:	00 00       	nop
	_delay_ms(100);
	PORTD |= (1<<redPort) | (1<<bluePort);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	80 66       	ori	r24, 0x60	; 96
 13e:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<greenPort) & (1<<redPort);
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	80 72       	andi	r24, 0x20	; 32
 144:	8b b9       	out	0x0b, r24	; 11
 146:	87 ea       	ldi	r24, 0xA7	; 167
 148:	91 e6       	ldi	r25, 0x61	; 97
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <batteryLow+0x52>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <batteryLow+0x58>
 150:	00 00       	nop
	_delay_ms(100);
	PORTD |= (1<<greenPort) |(1<<redPort);
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	80 6a       	ori	r24, 0xA0	; 160
 156:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<bluePort) & ~(1<<greenPort);
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	8f 73       	andi	r24, 0x3F	; 63
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	87 ea       	ldi	r24, 0xA7	; 167
 160:	91 e6       	ldi	r25, 0x61	; 97
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <batteryLow+0x6a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <batteryLow+0x70>
 168:	00 00       	nop
	_delay_ms(100);
	PORTD |= (1<<bluePort) | (1<<greenPort);
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	80 6c       	ori	r24, 0xC0	; 192
 16e:	8b b9       	out	0x0b, r24	; 11
	
	idle();
	return 0;
}
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	08 95       	ret

00000174 <pcIntSetup>:
}

unsigned char pcIntSetup(void)

{
	PCICR |= (1<<PCIE1);
 174:	e8 e6       	ldi	r30, 0x68	; 104
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT10);
 17e:	ec e6       	ldi	r30, 0x6C	; 108
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	84 60       	ori	r24, 0x04	; 4
 186:	80 83       	st	Z, r24
	sei();
 188:	78 94       	sei
	return 0;
}
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret

0000018e <__vector_4>:

ISR(PCINT1_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	//flashy();
	//charging();
	batteryLow();
 1b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <batteryLow>

}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <main>:
		vcnlBegin(vcnl_write);
		num = vcnlTransceive();
		*/
		/*DDRD = (1<<6);
		DDRD |= (1<<redPort);*/
		DDRD |= (1<<greenPort);
 1d6:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |=(1<<redPort);
 1d8:	55 9a       	sbi	0x0a, 5	; 10
		DDRD |=(1<<bluePort);
 1da:	56 9a       	sbi	0x0a, 6	; 10
		DDRE |=(1<<drvSleep);
 1dc:	6b 9a       	sbi	0x0d, 3	; 13
		DDRC &= ~(1<<2);
 1de:	3a 98       	cbi	0x07, 2	; 7
		PORTC |=(1<<2);
 1e0:	42 9a       	sbi	0x08, 2	; 8
		PORTE |=(1<<drvSleep);
 1e2:	73 9a       	sbi	0x0e, 3	; 14

			DDRC |= (1<<drvIn1);
 1e4:	38 9a       	sbi	0x07, 0	; 7
			DDRC |= (1<<drvIn2);
 1e6:	39 9a       	sbi	0x07, 1	; 7
		boostEnable();
 1e8:	0e 94 6e 00 	call	0xdc	; 0xdc <boostEnable>
		pcIntSetup();
 1ec:	0e 94 ba 00 	call	0x174	; 0x174 <pcIntSetup>
		PORTC |=(1<<1);
		*/
		
				
		
		solOn();
 1f0:	0e 94 72 00 	call	0xe4	; 0xe4 <solOn>
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main+0x1e>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
