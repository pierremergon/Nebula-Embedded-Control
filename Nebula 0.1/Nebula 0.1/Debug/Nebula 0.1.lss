
Nebula 0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000514  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eab  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e43  00000000  00000000  00002647  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000104d  00000000  00000000  0000348a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  000044d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000794  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca8  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00005da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_3>
  10:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 43 02 	call	0x486	; 0x486 <main>
  d4:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <apdsTransceive>:
  dc:	cf 93       	push	r28
  de:	82 e7       	ldi	r24, 0x72	; 114
  e0:	0e 94 40 01 	call	0x280	; 0x280 <i2c_start>
  e4:	8c e9       	ldi	r24, 0x9C	; 156
  e6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <i2c_write>
  ea:	83 e7       	ldi	r24, 0x73	; 115
  ec:	0e 94 40 01 	call	0x280	; 0x280 <i2c_start>
  f0:	0e 94 82 01 	call	0x304	; 0x304 <i2c_readNak>
  f4:	c8 2f       	mov	r28, r24
  f6:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_stop>
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	0e 94 40 01 	call	0x280	; 0x280 <i2c_start>
 100:	85 ee       	ldi	r24, 0xE5	; 229
 102:	0e 94 70 01 	call	0x2e0	; 0x2e0 <i2c_write>
 106:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_stop>
 10a:	cf 3f       	cpi	r28, 0xFF	; 255
 10c:	11 f4       	brne	.+4      	; 0x112 <apdsTransceive+0x36>
 10e:	0e 94 b0 00 	call	0x160	; 0x160 <flashy>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <boostEnable>:
unsigned char systemNoGo(void)
{
	batteryLow();
	return 0;

}
 118:	6a 9a       	sbi	0x0d, 2	; 13
 11a:	72 9a       	sbi	0x0e, 2	; 14
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 95       	ret

00000120 <comparator>:
 120:	29 9a       	sbi	0x05, 1	; 5
 122:	83 b1       	in	r24, 0x03	; 3
 124:	82 fb       	bst	r24, 2
 126:	88 27       	eor	r24, r24
 128:	80 f9       	bld	r24, 0
 12a:	08 95       	ret

0000012c <solOn>:
 12c:	73 9a       	sbi	0x0e, 3	; 14
 12e:	41 9a       	sbi	0x08, 1	; 8
 130:	83 ec       	ldi	r24, 0xC3	; 195
 132:	99 e0       	ldi	r25, 0x09	; 9
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <solOn+0x8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <solOn+0xe>
 13a:	00 00       	nop
 13c:	41 98       	cbi	0x08, 1	; 8
 13e:	40 98       	cbi	0x08, 0	; 8
 140:	73 98       	cbi	0x0e, 3	; 14
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret

00000146 <solOff>:
 146:	73 9a       	sbi	0x0e, 3	; 14
 148:	40 9a       	sbi	0x08, 0	; 8
 14a:	83 ec       	ldi	r24, 0xC3	; 195
 14c:	99 e0       	ldi	r25, 0x09	; 9
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <solOff+0x8>
 152:	00 c0       	rjmp	.+0      	; 0x154 <solOff+0xe>
 154:	00 00       	nop
 156:	40 98       	cbi	0x08, 0	; 8
 158:	41 98       	cbi	0x08, 1	; 8
 15a:	73 98       	cbi	0x0e, 3	; 14
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret

00000160 <flashy>:
 160:	5d 98       	cbi	0x0b, 5	; 11
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	80 e7       	ldi	r24, 0x70	; 112
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <flashy+0x8>
 170:	00 c0       	rjmp	.+0      	; 0x172 <flashy+0x12>
 172:	00 00       	nop
 174:	5d 9a       	sbi	0x0b, 5	; 11
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	80 e7       	ldi	r24, 0x70	; 112
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <flashy+0x1c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <flashy+0x26>
 186:	00 00       	nop
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret

0000018c <batteryLow>:
 18c:	5d 98       	cbi	0x0b, 5	; 11
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	80 e7       	ldi	r24, 0x70	; 112
 192:	92 e0       	ldi	r25, 0x02	; 2
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <batteryLow+0x8>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <batteryLow+0x12>
 19e:	00 00       	nop
 1a0:	5d 9a       	sbi	0x0b, 5	; 11
 1a2:	5f 98       	cbi	0x0b, 7	; 11
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	80 e7       	ldi	r24, 0x70	; 112
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <batteryLow+0x1e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <batteryLow+0x28>
 1b4:	00 00       	nop
 1b6:	5f 9a       	sbi	0x0b, 7	; 11
 1b8:	5e 98       	cbi	0x0b, 6	; 11
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	80 e7       	ldi	r24, 0x70	; 112
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <batteryLow+0x34>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <batteryLow+0x3e>
 1ca:	00 00       	nop
 1cc:	5e 9a       	sbi	0x0b, 6	; 11
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	8f 79       	andi	r24, 0x9F	; 159
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	80 e7       	ldi	r24, 0x70	; 112
 1d8:	92 e0       	ldi	r25, 0x02	; 2
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <batteryLow+0x4e>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <batteryLow+0x58>
 1e4:	00 00       	nop
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	80 66       	ori	r24, 0x60	; 96
 1ea:	8b b9       	out	0x0b, r24	; 11
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	80 72       	andi	r24, 0x20	; 32
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	80 e7       	ldi	r24, 0x70	; 112
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <batteryLow+0x6c>
 200:	00 c0       	rjmp	.+0      	; 0x202 <batteryLow+0x76>
 202:	00 00       	nop
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	80 6a       	ori	r24, 0xA0	; 160
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	8f 73       	andi	r24, 0x3F	; 63
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	80 e7       	ldi	r24, 0x70	; 112
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <batteryLow+0x8a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <batteryLow+0x94>
 220:	00 00       	nop
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	80 6c       	ori	r24, 0xC0	; 192
 226:	8b b9       	out	0x0b, r24	; 11
 228:	8b b1       	in	r24, 0x0b	; 11
 22a:	8f 75       	andi	r24, 0x5F	; 95
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	80 e7       	ldi	r24, 0x70	; 112
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <batteryLow+0xa8>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <batteryLow+0xb2>
 23e:	00 00       	nop
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	80 6a       	ori	r24, 0xA0	; 160
 244:	8b b9       	out	0x0b, r24	; 11
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret

0000024a <charging>:
	//idle();
	return 0;
}

unsigned char charging(void)//charge indicator
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
	//pin change int
	comp = comparator();
 24e:	0e 94 90 00 	call	0x120	; 0x120 <comparator>
 252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if ((PINB & (1<<batteryPort)) == 0)
 256:	18 99       	sbic	0x03, 0	; 3
 258:	02 c0       	rjmp	.+4      	; 0x25e <charging+0x14>
	{
		PORTD &= ~(1<<redPort);
 25a:	5d 98       	cbi	0x0b, 5	; 11
 25c:	0d c0       	rjmp	.+26     	; 0x278 <charging+0x2e>
	}
	else if((((PINB & (1<<batteryPort)) != 0) & (comp)))
 25e:	93 b1       	in	r25, 0x03	; 3
 260:	91 70       	andi	r25, 0x01	; 1
 262:	c9 2f       	mov	r28, r25
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	d9 2f       	mov	r29, r25
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	8c 23       	and	r24, r28
 26c:	9d 23       	and	r25, r29
 26e:	89 2b       	or	r24, r25
 270:	11 f0       	breq	.+4      	; 0x276 <charging+0x2c>
	{
		PORTD |= (1<<redPort);
 272:	5d 9a       	sbi	0x0b, 5	; 11
 274:	01 c0       	rjmp	.+2      	; 0x278 <charging+0x2e>
	}
	else
	{
		PORTD &= ~(1<<redPort);
 276:	5d 98       	cbi	0x0b, 5	; 11
	}

	return 0;
}
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <i2c_start>:
 280:	94 ea       	ldi	r25, 0xA4	; 164
 282:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 286:	ec eb       	ldi	r30, 0xBC	; 188
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	99 23       	and	r25, r25
 28e:	ec f7       	brge	.-6      	; 0x28a <i2c_start+0xa>
 290:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 294:	98 7f       	andi	r25, 0xF8	; 248
 296:	98 30       	cpi	r25, 0x08	; 8
 298:	11 f0       	breq	.+4      	; 0x29e <i2c_start+0x1e>
 29a:	90 31       	cpi	r25, 0x10	; 16
 29c:	a1 f4       	brne	.+40     	; 0x2c6 <i2c_start+0x46>
 29e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2a2:	84 e8       	ldi	r24, 0x84	; 132
 2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2a8:	ec eb       	ldi	r30, 0xBC	; 188
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	88 23       	and	r24, r24
 2b0:	ec f7       	brge	.-6      	; 0x2ac <i2c_start+0x2c>
 2b2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 2b6:	98 7f       	andi	r25, 0xF8	; 248
 2b8:	98 31       	cpi	r25, 0x18	; 24
 2ba:	39 f0       	breq	.+14     	; 0x2ca <i2c_start+0x4a>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 34       	cpi	r25, 0x40	; 64
 2c0:	29 f4       	brne	.+10     	; 0x2cc <i2c_start+0x4c>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	08 95       	ret
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret

000002ce <i2c_stop>:
 2ce:	84 e9       	ldi	r24, 0x94	; 148
 2d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2d4:	ec eb       	ldi	r30, 0xBC	; 188
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	84 fd       	sbrc	r24, 4
 2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <i2c_stop+0xa>
 2de:	08 95       	ret

000002e0 <i2c_write>:
 2e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2e4:	84 e8       	ldi	r24, 0x84	; 132
 2e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2ea:	ec eb       	ldi	r30, 0xBC	; 188
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	88 23       	and	r24, r24
 2f2:	ec f7       	brge	.-6      	; 0x2ee <i2c_write+0xe>
 2f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 2f8:	98 7f       	andi	r25, 0xF8	; 248
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	98 32       	cpi	r25, 0x28	; 40
 2fe:	09 f4       	brne	.+2      	; 0x302 <i2c_write+0x22>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret

00000304 <i2c_readNak>:
 304:	84 e8       	ldi	r24, 0x84	; 132
 306:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 30a:	ec eb       	ldi	r30, 0xBC	; 188
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	88 23       	and	r24, r24
 312:	ec f7       	brge	.-6      	; 0x30e <i2c_readNak+0xa>
 314:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 318:	08 95       	ret

0000031a <__vector_1>:
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	2f 93       	push	r18
 326:	3f 93       	push	r19
 328:	4f 93       	push	r20
 32a:	5f 93       	push	r21
 32c:	6f 93       	push	r22
 32e:	7f 93       	push	r23
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
 342:	0e 94 96 00 	call	0x12c	; 0x12c <solOn>
 346:	0e 94 6e 00 	call	0xdc	; 0xdc <apdsTransceive>
 34a:	82 e7       	ldi	r24, 0x72	; 114
 34c:	0e 94 40 01 	call	0x280	; 0x280 <i2c_start>
 350:	85 ee       	ldi	r24, 0xE5	; 229
 352:	0e 94 70 01 	call	0x2e0	; 0x2e0 <i2c_write>
 356:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_stop>
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <__vector_4>:
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
 39e:	32 99       	sbic	0x06, 2	; 6
 3a0:	15 c0       	rjmp	.+42     	; 0x3cc <__vector_4+0x50>
 3a2:	0e 94 96 00 	call	0x12c	; 0x12c <solOn>
 3a6:	2f e9       	ldi	r18, 0x9F	; 159
 3a8:	86 e8       	ldi	r24, 0x86	; 134
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <__vector_4+0x30>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <__vector_4+0x3a>
 3b6:	00 00       	nop
 3b8:	0e 94 a3 00 	call	0x146	; 0x146 <solOff>
 3bc:	87 e8       	ldi	r24, 0x87	; 135
 3be:	93 e1       	ldi	r25, 0x13	; 19
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <__vector_4+0x44>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <__vector_4+0x4a>
 3c6:	00 00       	nop
 3c8:	0e 94 b0 00 	call	0x160	; 0x160 <flashy>
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <__vector_3>:
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	5f 93       	push	r21
 400:	6f 93       	push	r22
 402:	7f 93       	push	r23
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	af 93       	push	r26
 40a:	bf 93       	push	r27
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
 410:	0e 94 25 01 	call	0x24a	; 0x24a <charging>
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	bf 91       	pop	r27
 41a:	af 91       	pop	r26
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	7f 91       	pop	r23
 422:	6f 91       	pop	r22
 424:	5f 91       	pop	r21
 426:	4f 91       	pop	r20
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <__vector_11>:
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	2f 93       	push	r18
 442:	3f 93       	push	r19
 444:	4f 93       	push	r20
 446:	5f 93       	push	r21
 448:	6f 93       	push	r22
 44a:	7f 93       	push	r23
 44c:	8f 93       	push	r24
 44e:	9f 93       	push	r25
 450:	af 93       	push	r26
 452:	bf 93       	push	r27
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31
 458:	0e 94 a3 00 	call	0x146	; 0x146 <solOff>
 45c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count>
 460:	0e 94 b0 00 	call	0x160	; 0x160 <flashy>
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	bf 91       	pop	r27
 46a:	af 91       	pop	r26
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	7f 91       	pop	r23
 472:	6f 91       	pop	r22
 474:	5f 91       	pop	r21
 476:	4f 91       	pop	r20
 478:	3f 91       	pop	r19
 47a:	2f 91       	pop	r18
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <main>:
		DDRC &= ~(1<<2);
		PORTC |=(1<<2);
		DDRB &= ~(1<<0);
		PORTB |= (1<<0);
		*/
		DDRD |= (1<<greenPort);
 486:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |= (1<<bluePort);
 488:	56 9a       	sbi	0x0a, 6	; 10
		DDRD |= (1<<redPort); PORTD |= ((1<<greenPort) | (1<<bluePort) | (1<<redPort));
 48a:	55 9a       	sbi	0x0a, 5	; 10
 48c:	8b b1       	in	r24, 0x0b	; 11
 48e:	80 6e       	ori	r24, 0xE0	; 224
 490:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<drvIn1);
		PORTC &= ~(1<<drvIn2);
		//PORTE |= (1<<drvSleep);
		
		*/
		boostEnable();
 492:	0e 94 8c 00 	call	0x118	; 0x118 <boostEnable>
       // sei();
    while(1)
    {
			//sleep_mode();
//flashy();
batteryLow();
 496:	0e 94 c6 00 	call	0x18c	; 0x18c <batteryLow>
 49a:	fd cf       	rjmp	.-6      	; 0x496 <main+0x10>

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
